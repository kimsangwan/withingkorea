{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _momentTimezone = require('moment-timezone');\n\nvar _momentTimezone2 = _interopRequireDefault(_momentTimezone);\n\nvar _func = require('./func');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // loads moment-timezone's timezone data, which comes from the\n// IANA Time Zone Database at https://www.iana.org/time-zones\n\n\n_momentTimezone2.default.tz.load({\n  zones: [],\n  links: [],\n  version: 'latest'\n});\n\nvar guessUserTz = function guessUserTz() {\n  // User-Agent sniffing is not always reliable, but is the recommended technique\n  // for determining whether or not we're on a mobile device according to MDN\n  // see https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent#Mobile_Tablet_or_Desktop\n  var isMobile = global.navigator !== undefined ? global.navigator.userAgent.match(/Mobi/) : false;\n  var supportsIntl = global.Intl !== undefined;\n  var userTz = void 0;\n\n  if (isMobile && supportsIntl) {\n    // moment-timezone gives preference to the Intl API regardless of device type,\n    // so unset global.Intl to trick moment-timezone into using its fallback\n    // see https://github.com/moment/moment-timezone/issues/441\n    // TODO: Clean this up when that issue is resolved\n    var globalIntl = global.Intl;\n    global.Intl = undefined;\n    userTz = _momentTimezone2.default.tz.guess();\n    global.Intl = globalIntl;\n  } else {\n    userTz = _momentTimezone2.default.tz.guess();\n  } // return GMT if we're unable to guess or the system is using UTC\n\n\n  if (!userTz || userTz === 'UTC') return getTzForName('Etc/Greenwich');\n\n  try {\n    return getTzForName(userTz);\n  } catch (e) {\n    console.error(e);\n    return getTzForName('Etc/Greenwich');\n  }\n};\n/**\n * Create a time data object using moment.\n * If a time is provided, just format it; if not, use the current time.\n *\n * @function getValidTimeData\n * @param  {string} time          a time; defaults to now\n * @param  {string} meridiem      AM or PM; defaults to AM via moment\n * @param  {Number} timeMode      12 or 24-hour mode\n * @param  {string} tz            a timezone name; defaults to guessing a user's tz or GMT\n * @return {Object}               a key-value representation of time data\n */\n\n\nvar getValidTimeData = function getValidTimeData() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var tz = options.tz,\n      time = options.time,\n      timeMode = options.timeMode,\n      _options$useTz = options.useTz,\n      useTz = _options$useTz === undefined ? true : _options$useTz,\n      _options$meridiem = options.meridiem,\n      meridiem = _options$meridiem === undefined ? null : _options$meridiem;\n  var validMeridiem = getValidMeridiem(meridiem); // when we only have a valid meridiem, that implies a 12h mode\n\n  var mode = validMeridiem && !timeMode ? 12 : timeMode || 24;\n  var timezone = tz || guessUserTz().zoneName;\n  var validMode = getValidateTimeMode(mode);\n  var validTime = getValidTimeString(time, validMeridiem);\n  var format12 = 'hh:mmA';\n  var format24 = 'HH:mmA'; // What format is the hour we provide to moment below in?\n\n  var hourFormat = validMode === 12 ? format12 : format24;\n  var time24 = void 0;\n  var time12 = void 0;\n  var formatTime = (0, _momentTimezone2.default)('1970-01-01 ' + validTime, 'YYYY-MM-DD ' + hourFormat, 'en');\n\n  if (time || !useTz) {\n    time24 = (validTime ? formatTime.format(format24) : (0, _momentTimezone2.default)().format(format24)).split(/:/);\n    time12 = (validTime ? formatTime.format(format12) : (0, _momentTimezone2.default)().format(format12)).split(/:/);\n  } else {\n    time24 = (validTime ? formatTime.tz(timezone).format(format24) : (0, _momentTimezone2.default)().tz(timezone).format(format24)).split(/:/);\n    time12 = (validTime ? formatTime.tz(timezone).format(format12) : (0, _momentTimezone2.default)().tz(timezone).format(format12)).split(/:/);\n  }\n\n  var timeData = {\n    timezone: timezone,\n    mode: validMode,\n    hour24: (0, _func.head)(time24),\n    minute: (0, _func.last)(time24).slice(0, 2),\n    hour12: (0, _func.head)(time12).replace(/^0/, ''),\n    meridiem: validMode === 12 ? (0, _func.last)(time12).slice(2) : null\n  };\n  return timeData;\n};\n/**\n * Format the current time as a string\n * @function getCurrentTime\n * @return {string}\n */\n\n\nvar getCurrentTime = function getCurrentTime() {\n  var time = getValidTimeData();\n  return time.hour24 + ':' + time.minute;\n};\n/**\n * Get an integer representation of a time.\n * @function getValidateIntTime\n * @param  {string} time\n * @return {Number}\n */\n\n\nvar getValidateIntTime = function getValidateIntTime(time) {\n  if (isNaN(parseInt(time, 10))) {\n    return 0;\n  }\n\n  return parseInt(time, 10);\n};\n/**\n * Validate, set a default for, and stringify time data.\n * @function getValidateTime\n * @param {string}\n * @return {string}\n */\n\n\nvar getValidateTime = function getValidateTime(time) {\n  var result = time;\n\n  if (_func.is.undefined(result)) {\n    result = '00';\n  }\n\n  if (isNaN(parseInt(result, 10))) {\n    result = '00';\n  }\n\n  if (parseInt(result, 10) < 10) {\n    result = '0' + parseInt(result, 10);\n  }\n\n  return '' + result;\n};\n/**\n * Given a time and meridiem, produce a time string to pass to moment\n * @function getValidTimeString\n * @param  {string} time\n * @param  {string} meridiem\n * @return {string}\n */\n\n\nvar getValidTimeString = function getValidTimeString(time, meridiem) {\n  if (_func.is.string(time)) {\n    var validTime = time && time.indexOf(':').length >= 0 ? time.split(/:/).map(function (t) {\n      return getValidateTime(t);\n    }).join(':') : time;\n    var hourAsInt = parseInt((0, _func.head)(validTime.split(/:/)), 10);\n    var is12hTime = hourAsInt > 0 && hourAsInt <= 12;\n    validTime = validTime && meridiem && is12hTime ? validTime + ' ' + meridiem : validTime;\n    return validTime;\n  }\n\n  return time;\n};\n/**\n * Given a meridiem, try to ensure that it's formatted for use with moment\n * @function getValidMeridiem\n * @param  {string} meridiem\n * @return {string}\n */\n\n\nvar getValidMeridiem = function getValidMeridiem(meridiem) {\n  if (_func.is.string(meridiem)) {\n    return meridiem && meridiem.match(/am|pm/i) ? meridiem.toLowerCase() : null;\n  }\n\n  return meridiem;\n};\n/**\n * Ensure that a meridiem passed as a prop has a valid value\n * @function getValidateMeridiem\n * @param  {string} time\n * @param  {string|Number} timeMode\n * @return {string|null}\n */\n\n\nvar getValidateMeridiem = function getValidateMeridiem(time, timeMode) {\n  var validateTime = time || getCurrentTime();\n  var mode = parseInt(timeMode, 10); // eslint-disable-next-line no-unused-vars\n\n  var hour = validateTime.split(/:/)[0];\n  hour = getValidateIntTime(hour);\n  if (mode === 12) return hour > 12 ? 'PM' : 'AM';\n  return null;\n};\n/**\n * Validate and set a sensible default for time modes.\n *\n * @function getValidateTimeMode\n * @param  {string|Number} timeMode\n * @return {Number}\n */\n\n\nvar getValidateTimeMode = function getValidateTimeMode(timeMode) {\n  var mode = parseInt(timeMode, 10);\n\n  if (isNaN(mode)) {\n    return 24;\n  }\n\n  if (mode !== 24 && mode !== 12) {\n    return 24;\n  }\n\n  return mode;\n};\n\nvar tzNames = function () {\n  //  We want to subset the existing timezone data as much as possible, both for efficiency\n  //  and to avoid confusing the user. Here, we focus on removing reduntant timezone names\n  //  and timezone names for timezones we don't necessarily care about, like Antarctica, and\n  //  special timezone names that exist for convenience.\n  var scrubbedPrefixes = ['Antarctica', 'Arctic', 'Chile'];\n  var scrubbedSuffixes = ['ACT', 'East', 'Knox_IN', 'LHI', 'North', 'NSW', 'South', 'West'];\n\n  var tznames = _momentTimezone2.default.tz.names().filter(function (name) {\n    return name.indexOf('/') >= 0;\n  }).filter(function (name) {\n    return !scrubbedPrefixes.indexOf(name.split('/')[0]) >= 0;\n  }).filter(function (name) {\n    return !scrubbedSuffixes.indexOf(name.split('/').slice(-1)[0]) >= 0;\n  });\n\n  return tznames;\n}(); // We need a human-friendly city name for each timezone identifier\n// counting Canada/*, Mexico/*, and US/* allows users to search for\n// things like 'Eastern' or 'Mountain' and get matches back\n\n\nvar tzCities = tzNames.map(function (name) {\n  return ['Canada', 'Mexico', 'US'].indexOf(name.split('/')[0]) >= 0 ? name : name.split('/').slice(-1)[0];\n}).map(function (name) {\n  return name.replace(/_/g, ' ');\n}); // Provide a mapping between a human-friendly city name and its corresponding\n// timezone identifier and timezone abbreviation as a named export.\n// We can fuzzy match on any of these.\n\nvar tzMaps = tzCities.map(function (city) {\n  var tzMap = {};\n  var tzName = tzNames[tzCities.indexOf(city)];\n  tzMap.city = city;\n  tzMap.zoneName = tzName;\n  tzMap.zoneAbbr = (0, _momentTimezone2.default)().tz(tzName).zoneAbbr();\n  return tzMap;\n});\n\nvar getTzForCity = function getTzForCity(city) {\n  var val = city.toLowerCase();\n  var maps = tzMaps.filter(function (tzMap) {\n    return tzMap.city.toLowerCase() === val;\n  });\n  return (0, _func.head)(maps);\n};\n\nvar getTzCountryAndCity = function getTzCountryAndCity(name) {\n  var sections = name.split('/');\n  return {\n    country: sections[0].toLowerCase(),\n    city: sections.slice(-1)[0].toLowerCase()\n  };\n};\n\nvar _matchTzByName = function _matchTzByName(target, name) {\n  var v1 = getTzCountryAndCity(target);\n  var v2 = getTzCountryAndCity(name);\n  return v1.country === v2.country && v1.city === v2.city;\n};\n\nvar getTzForName = function getTzForName(name) {\n  var maps = tzMaps.filter(function (tzMap) {\n    return tzMap.zoneName === name;\n  });\n\n  if (!maps.length && /\\//.test(name)) {\n    maps = tzMaps.filter(function (tzMap) {\n      return tzMap.zoneAbbr === name;\n    });\n  }\n\n  if (!maps.length) {\n    maps = tzMaps.filter(function (tzMap) {\n      return _matchTzByName(tzMap.zoneName, name);\n    });\n  }\n\n  if (!maps.length) {\n    throw new Error('Can not find target timezone for ' + name);\n  }\n\n  return (0, _func.head)(maps);\n};\n\nvar hourFormatter = function hourFormatter(hour) {\n  var defaultTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '00:00';\n  if (!hour) return defaultTime;\n\n  var _$split = ('' + hour).split(/[:|\\s]/),\n      _$split2 = _slicedToArray(_$split, 3),\n      h = _$split2[0],\n      m = _$split2[1],\n      meridiem = _$split2[2];\n\n  if (meridiem && meridiem.toLowerCase() === 'pm') meridiem = 'PM';\n  if (meridiem && meridiem.toLowerCase() === 'am') meridiem = 'AM';\n  if (meridiem && meridiem !== 'AM' && meridiem !== 'PM') meridiem = 'AM';\n  if (!h || isNaN(h)) h = '0';\n  if (!meridiem && Number(h > 24)) h = Number(h) - 24;\n  if (meridiem && Number(h > 12)) h = Number(h) - 12;\n  if (!m || isNaN(m) || Number(m) >= 60) m = '0';\n  if (Number(h) < 10) h = '0' + Number(h);\n  if (Number(m) < 10) m = '0' + Number(m);\n  return meridiem ? h + ':' + m + ' ' + meridiem : h + ':' + m;\n};\n\nvar withoutMeridiem = function withoutMeridiem(hour) {\n  return hour.replace(/\\s[P|A]M$/, '');\n};\n\nvar getStartAndEnd = function getStartAndEnd(from, to) {\n  var current = (0, _momentTimezone2.default)();\n  var date = current.format('YYYY-MM-DD');\n  var nextDate = current.add(1, 'day').format('YYYY-MM-DD');\n  var f = hourFormatter(from, '00:00');\n  var t = hourFormatter(to, '23:30');\n  var start = date + ' ' + withoutMeridiem(f);\n  var endTmp = withoutMeridiem(t);\n  var end = (0, _momentTimezone2.default)(date + ' ' + endTmp) <= (0, _momentTimezone2.default)(start) ? nextDate + ' ' + endTmp : date + ' ' + endTmp;\n  if (/PM$/.test(f)) start = (0, _momentTimezone2.default)(start).add(12, 'hours').format('YYYY-MM-DD HH:mm');\n  if (/PM$/.test(t)) end = (0, _momentTimezone2.default)(end).add(12, 'hours').format('YYYY-MM-DD HH:mm');\n  return {\n    start: start,\n    end: end\n  };\n};\n\nvar get12ModeTimes = function get12ModeTimes(_ref) {\n  var from = _ref.from,\n      to = _ref.to,\n      _ref$step = _ref.step,\n      step = _ref$step === undefined ? 30 : _ref$step,\n      _ref$unit = _ref.unit,\n      unit = _ref$unit === undefined ? 'minutes' : _ref$unit;\n\n  var _getStartAndEnd = getStartAndEnd(from, to),\n      start = _getStartAndEnd.start,\n      end = _getStartAndEnd.end;\n\n  var times = [];\n  var time = (0, _momentTimezone2.default)(start);\n\n  while (time <= (0, _momentTimezone2.default)(end)) {\n    var hour = Number(time.format('HH'));\n    times.push(time.format('hh:mm') + ' ' + (hour >= 12 ? 'PM' : 'AM'));\n    time = time.add(step, unit);\n  }\n\n  return times;\n};\n\nvar get24ModeTimes = function get24ModeTimes(_ref2) {\n  var from = _ref2.from,\n      to = _ref2.to,\n      _ref2$step = _ref2.step,\n      step = _ref2$step === undefined ? 30 : _ref2$step,\n      _ref2$unit = _ref2.unit,\n      unit = _ref2$unit === undefined ? 'minutes' : _ref2$unit;\n\n  var _getStartAndEnd2 = getStartAndEnd(from, to),\n      start = _getStartAndEnd2.start,\n      end = _getStartAndEnd2.end;\n\n  var times = [];\n  var time = (0, _momentTimezone2.default)(start);\n\n  while (time <= (0, _momentTimezone2.default)(end)) {\n    times.push(time.format('HH:mm'));\n    time = time.add(step, unit);\n  }\n\n  return times;\n};\n\nexports.default = {\n  tzMaps: tzMaps,\n  guessUserTz: guessUserTz,\n  hourFormatter: hourFormatter,\n  getStartAndEnd: getStartAndEnd,\n  get12ModeTimes: get12ModeTimes,\n  get24ModeTimes: get24ModeTimes,\n  withoutMeridiem: withoutMeridiem,\n  time: getValidTimeData,\n  current: getCurrentTime,\n  tzForCity: getTzForCity,\n  tzForName: getTzForName,\n  validate: getValidateTime,\n  validateInt: getValidateIntTime,\n  validateMeridiem: getValidateMeridiem,\n  validateTimeMode: getValidateTimeMode\n};","map":null,"metadata":{},"sourceType":"script"}