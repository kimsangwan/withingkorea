{"ast":null,"code":"var _jsxFileName = \"/Users/gimsang-wan/Desktop/Endless-react-admin-template/endless 1/src/components/dashboard/server/liveChart.js\";\nimport React, { Component, Fragment } from 'react';\nimport { Sparklines, SparklinesLine } from 'react-sparklines';\nconst primary = localStorage.getItem('primary_color') || \"#4466f2\";\n\nfunction boxMullerRandom() {\n  let phase = false,\n      x1,\n      x2,\n      w;\n  return function () {\n    // eslint-disable-next-line\n    if (phase = !phase) {\n      do {\n        x1 = 2.0 * Math.random() - 1.0;\n        x2 = 2.0 * Math.random() - 1.0;\n        w = x1 * x1 + x2 * x2;\n      } while (w >= 1.0);\n\n      w = Math.sqrt(-2.0 * Math.log(w) / w);\n      return x1 * w;\n    } else {\n      return x2 * w;\n    }\n  }();\n}\n\nclass LiveChart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      this.interval = setInterval(() => this.setState({\n        data: this.state.data.concat([boxMullerRandom()])\n      }), 500);\n    };\n\n    this.componentWillUnmount = () => {\n      clearInterval(this.interval);\n    };\n\n    this.state = {\n      data: []\n    };\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"flot-chart-placeholder\",\n      id: \"cpu-updating\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(Sparklines, {\n      data: this.state.data,\n      limit: 20,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(SparklinesLine, {\n      color: primary,\n      style: {\n        strokeWidth: 0.4\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default LiveChart;","map":{"version":3,"sources":["/Users/gimsang-wan/Desktop/Endless-react-admin-template/endless 1/src/components/dashboard/server/liveChart.js"],"names":["React","Component","Fragment","Sparklines","SparklinesLine","primary","localStorage","getItem","boxMullerRandom","phase","x1","x2","w","Math","random","sqrt","log","LiveChart","constructor","props","componentDidMount","interval","setInterval","setState","data","state","concat","componentWillUnmount","clearInterval","render","strokeWidth"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,UAAT,EAAqBC,cAArB,QAA2C,kBAA3C;AAEA,MAAMC,OAAO,GAAGC,YAAY,CAACC,OAAb,CAAqB,eAArB,KAAyC,SAAzD;;AAEA,SAASC,eAAT,GAA2B;AACvB,MAAIC,KAAK,GAAG,KAAZ;AAAA,MACIC,EADJ;AAAA,MACQC,EADR;AAAA,MACYC,CADZ;AAGA,SAAQ,YAAY;AACpB;AACI,QAAIH,KAAK,GAAG,CAACA,KAAb,EAAoB;AAChB,SAAG;AACCC,QAAAA,EAAE,GAAG,MAAMG,IAAI,CAACC,MAAL,EAAN,GAAsB,GAA3B;AACAH,QAAAA,EAAE,GAAG,MAAME,IAAI,CAACC,MAAL,EAAN,GAAsB,GAA3B;AACAF,QAAAA,CAAC,GAAGF,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAAnB;AACH,OAJD,QAISC,CAAC,IAAI,GAJd;;AAMAA,MAAAA,CAAC,GAAGC,IAAI,CAACE,IAAL,CAAW,CAAC,GAAD,GAAOF,IAAI,CAACG,GAAL,CAASJ,CAAT,CAAR,GAAuBA,CAAjC,CAAJ;AACA,aAAOF,EAAE,GAAGE,CAAZ;AACH,KATD,MASO;AACH,aAAOD,EAAE,GAAGC,CAAZ;AACH;AACJ,GAdM,EAAP;AAeH;;AAED,MAAMK,SAAN,SAAwBhB,SAAxB,CAAkC;AAG9BiB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAMnBC,iBANmB,GAMC,MAAK;AACrB,WAAKC,QAAL,GAAgBC,WAAW,CAAC,MAC5B,KAAKC,QAAL,CAAc;AACVC,QAAAA,IAAI,EAAE,KAAKC,KAAL,CAAWD,IAAX,CAAgBE,MAAhB,CAAuB,CAAClB,eAAe,EAAhB,CAAvB;AADI,OAAd,CAD2B,EAGvB,GAHuB,CAA3B;AAKH,KAZkB;;AAAA,SAcnBmB,oBAdmB,GAcI,MAAK;AACxBC,MAAAA,aAAa,CAAC,KAAKP,QAAN,CAAb;AACH,KAhBkB;;AAEf,SAAKI,KAAL,GAAa;AAAED,MAAAA,IAAI,EAAE;AAAR,KAAb;AAEH;;AAcDK,EAAAA,MAAM,GAAG;AACL,WACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAwC,MAAA,EAAE,EAAC,cAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,oBAAC,UAAD;AAAY,MAAA,IAAI,EAAE,KAAKJ,KAAL,CAAWD,IAA7B;AAAmC,MAAA,KAAK,EAAE,EAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,cAAD;AAAgB,MAAA,KAAK,EAAEnB,OAAvB;AAAgC,MAAA,KAAK,EAAE;AAAEyB,QAAAA,WAAW,EAAE;AAAf,OAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAFJ,CADJ,CADJ;AAWH;;AAjC6B;;AAoClC,eAAeb,SAAf","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { Sparklines, SparklinesLine } from 'react-sparklines';\n\nconst primary = localStorage.getItem('primary_color') || \"#4466f2\";\n\nfunction boxMullerRandom() {\n    let phase = false,\n        x1, x2, w;\n\n    return (function () {\n    // eslint-disable-next-line\n        if (phase = !phase) {\n            do {\n                x1 = 2.0 * Math.random() - 1.0;\n                x2 = 2.0 * Math.random() - 1.0;\n                w = x1 * x1 + x2 * x2;\n            } while (w >= 1.0);\n\n            w = Math.sqrt((-2.0 * Math.log(w)) / w);\n            return x1 * w;\n        } else {\n            return x2 * w;\n        }\n    })();\n}\n\nclass LiveChart extends Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = { data: [] };\n        \n    }\n    \n    componentDidMount = () =>{\n        this.interval = setInterval(() =>\n        this.setState({\n            data: this.state.data.concat([boxMullerRandom()])\n        }), 500);\n        \n    }\n\n    componentWillUnmount = () =>{\n        clearInterval(this.interval);\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <div className=\"flot-chart-placeholder\" id=\"cpu-updating\">\n\n                    <Sparklines data={this.state.data} limit={20}>\n                        <SparklinesLine color={primary} style={{ strokeWidth: 0.4 }} />\n                    </Sparklines>\n                </div>\n\n            </Fragment>\n        );\n    }\n}\n\nexport default LiveChart;"]},"metadata":{},"sourceType":"module"}