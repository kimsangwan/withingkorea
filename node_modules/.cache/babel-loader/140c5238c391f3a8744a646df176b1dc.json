{"ast":null,"code":"var _jsxFileName = \"/Users/gimsang-wan/Desktop/Endless-react-admin-template/endless 1/src/components/advance/imageCropper.js\";\nimport React, { Component, Fragment } from 'react';\nimport Breadcrumb from '../common/breadcrumb';\nimport ReactCrop from \"react-image-crop\";\nimport \"react-image-crop/dist/ReactCrop.css\";\n\nclass imageCropper extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onSelectFile = e => {\n      if (e.target.files && e.target.files.length > 0) {\n        const reader = new FileReader();\n        reader.addEventListener(\"load\", () => this.setState({\n          src: reader.result\n        }));\n        reader.readAsDataURL(e.target.files[0]);\n      }\n    };\n\n    this.onImageLoaded = image => {\n      this.imageRef = image;\n    };\n\n    this.onVideoLoaded = video => {\n      this.videoRef = video;\n    };\n\n    this.onCropComplete = crop => {\n      this.makeClientCrop(crop);\n    };\n\n    this.onCropChange = (crop, percentCrop) => {\n      // You could also use percentCrop:\n      this.setState({\n        crop\n      });\n    };\n\n    this.state = {\n      src: null,\n      crop: {\n        unit: \"%\",\n        width: 50,\n        height: 50,\n        aspect: 16 / 9\n      }\n    };\n  }\n\n  async makeClientCrop(crop) {\n    if (this.imageRef && crop.width && crop.height) {\n      const croppedImageUrl = await this.getCroppedImg(this.imageRef, crop, \"newFile.jpeg\");\n      this.setState({\n        croppedImageUrl\n      });\n    } else if (this.videoRef && crop.width && crop.height) {\n      const croppedVideoUrl = await this.getCroppedVid(this.videoRef, crop, \"mp4\");\n      this.setState({\n        croppedVideoUrl\n      });\n    }\n  }\n\n  getCroppedVid(video, crop, fileName) {\n    const canvas = document.createElement(\"canvas\");\n    const scaleX = video.naturalWidth / video.width;\n    const scaleY = video.naturalHeight / video.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(video, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          return;\n        }\n\n        blob.name = fileName;\n        window.URL.revokeObjectURL(this.fileUrl);\n        this.fileUrl = window.URL.createObjectURL(blob);\n        resolve(this.fileUrl);\n      }, \"video/mp4\");\n    });\n  }\n\n  getCroppedImg(image, crop, fileName) {\n    const canvas = document.createElement(\"canvas\");\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          return;\n        }\n\n        blob.name = fileName;\n        window.URL.revokeObjectURL(this.fileUrl);\n        this.fileUrl = window.URL.createObjectURL(blob);\n        resolve(this.fileUrl);\n      }, \"image/jpeg\");\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          crop = _this$state.crop,\n          croppedImageUrl = _this$state.croppedImageUrl,\n          croppedVideoUrl = _this$state.croppedVideoUrl,\n          src = _this$state.src;\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(Breadcrumb, {\n      title: \"Image Cropper\",\n      parent: \"Advance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"container-fluid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Image Cropper\")), React.createElement(\"div\", {\n      className: \"card-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"input-cropper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"file\",\n      onChange: this.onSelectFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    })), src && React.createElement(ReactCrop, {\n      src: src,\n      crop: crop,\n      onImageLoaded: this.onImageLoaded,\n      onComplete: this.onCropComplete,\n      onChange: this.onCropChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), croppedImageUrl && React.createElement(\"img\", {\n      alt: \"Crop\",\n      style: {\n        maxWidth: \"100%\"\n      },\n      src: croppedImageUrl,\n      className: \"crop-portion\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }), croppedVideoUrl && React.createElement(\"video\", {\n      controls: true,\n      width: \"250\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(\"source\", {\n      src: croppedVideoUrl,\n      type: \"video/mp4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default imageCropper;","map":{"version":3,"sources":["/Users/gimsang-wan/Desktop/Endless-react-admin-template/endless 1/src/components/advance/imageCropper.js"],"names":["React","Component","Fragment","Breadcrumb","ReactCrop","imageCropper","constructor","props","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","setState","src","result","readAsDataURL","onImageLoaded","image","imageRef","onVideoLoaded","video","videoRef","onCropComplete","crop","makeClientCrop","onCropChange","percentCrop","state","unit","width","height","aspect","croppedImageUrl","getCroppedImg","croppedVideoUrl","getCroppedVid","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","drawImage","x","y","Promise","resolve","reject","toBlob","blob","name","window","URL","revokeObjectURL","fileUrl","createObjectURL","render","maxWidth"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport Breadcrumb from '../common/breadcrumb';\nimport ReactCrop from \"react-image-crop\";\nimport \"react-image-crop/dist/ReactCrop.css\";\n\nclass imageCropper extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            src: null,\n            crop: {\n                unit: \"%\",\n                width: 50,\n                height: 50,\n                aspect: 16 / 9\n            }\n        }\n    }\n\n    onSelectFile = e => {\n        if (e.target.files && e.target.files.length > 0) {\n            const reader = new FileReader();\n            reader.addEventListener(\"load\", () =>\n                this.setState({ src: reader.result })\n            );\n            reader.readAsDataURL(e.target.files[0]);\n        }\n    };\n\n    // If you setState the crop in here you should return false.\n    onImageLoaded = image => {\n        this.imageRef = image;\n    };\n\n    onVideoLoaded = video => {\n        this.videoRef = video;\n    }\n\n    onCropComplete = crop => {\n        this.makeClientCrop(crop);\n    };\n\n    onCropChange = (crop, percentCrop) => {\n        // You could also use percentCrop:\n        this.setState({ crop });\n    };\n\n    async makeClientCrop(crop) {\n        if (this.imageRef && crop.width && crop.height) {\n            const croppedImageUrl = await this.getCroppedImg(\n                this.imageRef,\n                crop,\n                \"newFile.jpeg\"\n            );\n            this.setState({ croppedImageUrl });\n        } else if (this.videoRef && crop.width && crop.height) {\n            const croppedVideoUrl = await this.getCroppedVid(\n                this.videoRef,\n                crop,\n                \"mp4\"\n            );\n            this.setState({ croppedVideoUrl });\n        }\n    }\n\n    getCroppedVid(video, crop, fileName) {\n        const canvas = document.createElement(\"canvas\");\n        const scaleX = video.naturalWidth / video.width;\n        const scaleY = video.naturalHeight / video.height;\n        canvas.width = crop.width;\n        canvas.height = crop.height;\n        const ctx = canvas.getContext(\"2d\");\n\n        ctx.drawImage(\n            video,\n            crop.x * scaleX,\n            crop.y * scaleY,\n            crop.width * scaleX,\n            crop.height * scaleY,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n\n        return new Promise((resolve, reject) => {\n            canvas.toBlob(blob => {\n                if (!blob) {\n                    return;\n                }\n                blob.name = fileName;\n                window.URL.revokeObjectURL(this.fileUrl);\n                this.fileUrl = window.URL.createObjectURL(blob);\n                resolve(this.fileUrl);\n            }, \"video/mp4\");\n        });\n    }\n\n    getCroppedImg(image, crop, fileName) {\n        const canvas = document.createElement(\"canvas\");\n        const scaleX = image.naturalWidth / image.width;\n        const scaleY = image.naturalHeight / image.height;\n        canvas.width = crop.width;\n        canvas.height = crop.height;\n        const ctx = canvas.getContext(\"2d\");\n\n        ctx.drawImage(\n            image,\n            crop.x * scaleX,\n            crop.y * scaleY,\n            crop.width * scaleX,\n            crop.height * scaleY,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n\n        return new Promise((resolve, reject) => {\n            canvas.toBlob(blob => {\n                if (!blob) {\n                    //reject(new Error('Canvas is empty'));\n                    return;\n                }\n                blob.name = fileName;\n                window.URL.revokeObjectURL(this.fileUrl);\n                this.fileUrl = window.URL.createObjectURL(blob);\n                resolve(this.fileUrl);\n            }, \"image/jpeg\");\n        });\n    }\n\n    render() {\n        const { crop, croppedImageUrl, croppedVideoUrl, src } = this.state;\n\n\n        return (\n\n            <Fragment>\n                <Breadcrumb title=\"Image Cropper\" parent=\"Advance\" />\n\n                <div className=\"container-fluid\">\n                    <div className=\"card\">\n                        <div className=\"card-header\">\n                            <h5>Image Cropper</h5>\n                        </div>\n                        <div className=\"card-body\">\n                            <div className=\"input-cropper\">\n                                <input type=\"file\" onChange={this.onSelectFile} />\n                            </div>\n                            {src && (\n                                <ReactCrop\n                                    src={src}\n                                    crop={crop}\n                                    onImageLoaded={this.onImageLoaded}\n                                    onComplete={this.onCropComplete}\n                                    onChange={this.onCropChange}\n                                />\n                            )}\n                            {croppedImageUrl && (\n                                <img alt=\"Crop\" style={{ maxWidth: \"100%\" }} src={croppedImageUrl} className=\"crop-portion\" />\n                            )}\n\n                            {croppedVideoUrl && (\n                                <video controls width=\"250\">\n                                    <source src={croppedVideoUrl} type=\"video/mp4\" />\n                                </video>\n                            )}\n                        </div>\n                    </div>\n                </div>\n\n            </Fragment>\n        );\n    }\n}\n\nexport default imageCropper;"]},"metadata":{},"sourceType":"module"}