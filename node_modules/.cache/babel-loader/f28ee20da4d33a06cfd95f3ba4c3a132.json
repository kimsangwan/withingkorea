{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _time = require('../../utils/time');\n\nvar _time2 = _interopRequireDefault(_time);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar propTypes = {\n  hour: _propTypes2.default.string,\n  minute: _propTypes2.default.string,\n  timeMode: _propTypes2.default.number,\n  meridiem: _propTypes2.default.string,\n  clearFocus: _propTypes2.default.func,\n  colorPalette: _propTypes2.default.string,\n  handleTimeChange: _propTypes2.default.func,\n  handleMeridiemChange: _propTypes2.default.func,\n  focusDropdownOnTime: _propTypes2.default.bool\n};\nvar defaultProps = {\n  hour: '00',\n  minute: '00',\n  timeMode: 24,\n  meridiem: 'AM',\n  colorPalette: 'light',\n  clearFocus: Function.prototype,\n  handleTimeChange: Function.prototype,\n  handleMeridiemChange: Function.prototype,\n  focusDropdownOnTime: false\n};\n\nvar ClassicTheme = function (_React$PureComponent) {\n  _inherits(ClassicTheme, _React$PureComponent);\n\n  function ClassicTheme(props) {\n    _classCallCheck(this, ClassicTheme);\n\n    var _this = _possibleConstructorReturn(this, (ClassicTheme.__proto__ || Object.getPrototypeOf(ClassicTheme)).call(this, props));\n\n    _this.handleTimeChange = _this.handleTimeChange.bind(_this);\n    _this.handleFocusDropdownOnTime = _this.handleFocusDropdownOnTime.bind(_this);\n    _this.dropDown = _react2.default.createRef();\n    _this.dropDownActiveTime = _react2.default.createRef();\n    return _this;\n  }\n\n  _createClass(ClassicTheme, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.handleFocusDropdownOnTime();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      this.handleFocusDropdownOnTime();\n    }\n  }, {\n    key: 'handleFocusDropdownOnTime',\n    value: function handleFocusDropdownOnTime() {\n      if (this.props.focusDropdownOnTime) {\n        this.dropDown.current.scrollTop = this.dropDownActiveTime && this.dropDownActiveTime.current && this.dropDownActiveTime.current.offsetTop || 0;\n      }\n    }\n  }, {\n    key: 'handleTimeChange',\n    value: function handleTimeChange(timeData) {\n      var _timeData$split = timeData.split(' '),\n          _timeData$split2 = _slicedToArray(_timeData$split, 2),\n          time = _timeData$split2[0],\n          meridiem = _timeData$split2[1];\n\n      var _time$split = time.split(':'),\n          _time$split2 = _slicedToArray(_time$split, 2),\n          hour = _time$split2[0],\n          minute = _time$split2[1];\n\n      var _props = this.props,\n          handleTimeChange = _props.handleTimeChange,\n          clearFocus = _props.clearFocus;\n      handleTimeChange && handleTimeChange({\n        hour: hour,\n        minute: minute,\n        meridiem: meridiem || null\n      });\n      clearFocus && clearFocus();\n    }\n  }, {\n    key: 'checkTimeIsActive',\n    value: function checkTimeIsActive(time) {\n      var _props2 = this.props,\n          hour = _props2.hour,\n          minute = _props2.minute,\n          meridiem = _props2.meridiem;\n\n      var _time$split3 = time.split(' '),\n          _time$split4 = _slicedToArray(_time$split3, 2),\n          times = _time$split4[0],\n          rawMeridiem = _time$split4[1];\n\n      var _times$split = times.split(':'),\n          _times$split2 = _slicedToArray(_times$split, 2),\n          rawHour = _times$split2[0],\n          rawMinute = _times$split2[1];\n\n      var currentHour = _time2.default.validate(rawHour);\n\n      var currentMinute = _time2.default.validate(rawMinute);\n\n      if (parseInt(hour, 10) !== parseInt(currentHour, 10)) {\n        return false;\n      }\n\n      if (meridiem && meridiem !== rawMeridiem) {\n        return false;\n      }\n\n      if (Math.abs(parseInt(minute, 10) - parseInt(currentMinute, 10)) < 15) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: 'renderTimes',\n    value: function renderTimes(timeDatas) {\n      var _this2 = this;\n\n      var _props3 = this.props,\n          colorPalette = _props3.colorPalette,\n          focusDropdownOnTime = _props3.focusDropdownOnTime;\n      return timeDatas.map(function (timeData, index) {\n        var timeClass = _this2.checkTimeIsActive(timeData) ? 'classic_time active' : 'classic_time';\n\n        var _timeData$split3 = timeData.split(' '),\n            _timeData$split4 = _slicedToArray(_timeData$split3, 2),\n            time = _timeData$split4[0],\n            meridiem = _timeData$split4[1];\n\n        return _react2.default.createElement('div', {\n          key: index,\n          onClick: function onClick() {\n            _this2.handleTimeChange(timeData);\n          },\n          className: timeClass + ' ' + colorPalette,\n          ref: _this2.checkTimeIsActive(timeData) ? _this2.dropDownActiveTime : null\n        }, time, meridiem ? _react2.default.createElement('span', {\n          className: 'meridiem'\n        }, meridiem) : null);\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props4 = this.props,\n          timeMode = _props4.timeMode,\n          _props4$timeConfig = _props4.timeConfig,\n          timeConfig = _props4$timeConfig === undefined ? {} : _props4$timeConfig;\n      var timeDatas = timeMode === 12 ? _time2.default.get12ModeTimes(timeConfig) : _time2.default.get24ModeTimes(timeConfig);\n      return _react2.default.createElement('div', {\n        className: 'modal_container classic_theme_container',\n        ref: this.dropDown\n      }, this.renderTimes(timeDatas));\n    }\n  }]);\n\n  return ClassicTheme;\n}(_react2.default.PureComponent);\n\nClassicTheme.propTypes = propTypes;\nClassicTheme.defaultProps = defaultProps;\nexports.default = ClassicTheme;","map":null,"metadata":{},"sourceType":"script"}