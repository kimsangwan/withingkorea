{"ast":null,"code":"var EventEmitter = require('events').EventEmitter;\n\nmodule.exports = function (elem) {\n  return new Ever(elem);\n};\n\nfunction Ever(elem) {\n  this.element = elem;\n}\n\nEver.prototype = new EventEmitter();\n\nEver.prototype.on = function (name, cb, useCapture) {\n  if (!this._events) this._events = {};\n  if (!this._events[name]) this._events[name] = [];\n\n  this._events[name].push(cb);\n\n  this.element.addEventListener(name, cb, useCapture || false);\n  return this;\n};\n\nEver.prototype.addListener = Ever.prototype.on;\n\nEver.prototype.removeListener = function (type, listener, useCapture) {\n  if (!this._events) this._events = {};\n  this.element.removeEventListener(type, listener, useCapture || false);\n  var xs = this.listeners(type);\n  var ix = xs.indexOf(listener);\n  if (ix >= 0) xs.splice(ix, 1);\n  return this;\n};\n\nEver.prototype.removeAllListeners = function (type) {\n  var self = this;\n\n  function removeAll(t) {\n    var xs = self.listeners(t);\n\n    for (var i = 0; i < xs.length; i++) {\n      self.removeListener(t, xs[i]);\n    }\n  }\n\n  if (type) {\n    removeAll(type);\n  } else if (self._events) {\n    for (var key in self._events) {\n      if (key) removeAll(key);\n    }\n  }\n\n  return EventEmitter.prototype.removeAllListeners.apply(self, arguments);\n};\n\nvar initSignatures = require('./init.json');\n\nEver.prototype.emit = function (name, ev) {\n  if (typeof name === 'object') {\n    ev = name;\n    name = ev.type;\n  }\n\n  if (!isEvent(ev)) {\n    var type = Ever.typeOf(name);\n    var opts = ev || {};\n    if (opts.type === undefined) opts.type = name;\n    ev = document.createEvent(type + 's');\n    var init = typeof ev['init' + type] === 'function' ? 'init' + type : 'initEvent';\n    var sig = initSignatures[init];\n    var used = {};\n    var args = [];\n\n    for (var i = 0; i < sig.length; i++) {\n      var key = sig[i];\n      args.push(opts[key]);\n      used[key] = true;\n    }\n\n    ev[init].apply(ev, args); // attach remaining unused options to the object\n\n    for (var key in opts) {\n      if (!used[key]) ev[key] = opts[key];\n    }\n  }\n\n  return this.element.dispatchEvent(ev);\n};\n\nfunction isEvent(ev) {\n  var s = Object.prototype.toString.call(ev);\n  return /\\[object \\S+Event\\]/.test(s);\n}\n\nEver.types = require('./types.json');\n\nEver.typeOf = function () {\n  var types = {};\n\n  for (var key in Ever.types) {\n    var ts = Ever.types[key];\n\n    for (var i = 0; i < ts.length; i++) {\n      types[ts[i]] = key;\n    }\n  }\n\n  return function (name) {\n    return types[name] || 'Event';\n  };\n}();\n\n;","map":null,"metadata":{},"sourceType":"script"}