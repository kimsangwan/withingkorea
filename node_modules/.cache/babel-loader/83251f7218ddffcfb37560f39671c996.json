{"ast":null,"code":"import { GET_MEMBERS, GET_MEMBERS_SUCCESS, GET_CHATS, GET_CHATS_SUCCESS, GET_CHATS_ERROR, CHANGE_CHAT, CREATE_CHAT, SEARCH_MEMBER, SEND_MESSAGE, UPDATE_STATUS, UPDATE_SELECTED_USER, REPLY_BY_SELECTED_USER } from '../constant/actionTypes';\nimport contactsData from \"../data/chat/chatMember.js\";\nimport chatsData from \"../data/chat/chat.chats.json\";\nexport const getMembers = () => ({\n  type: GET_MEMBERS\n});\nexport const getMembersSuccess = (members, currentUser) => {\n  return {\n    type: GET_MEMBERS_SUCCESS,\n    payload: {\n      members,\n      currentUser\n    }\n  };\n};\nexport const getAllMembers = () => dispatch => {\n  dispatch(getMembers());\n  const members = contactsData;\n  const currentUser = members[0];\n  dispatch(getMembersSuccess(members, currentUser));\n};\nexport const beginChats = userId => ({\n  type: GET_CHATS,\n  payload: userId\n});\nexport const getChatsSuccess = (chats, selectedUser, online) => ({\n  type: GET_CHATS_SUCCESS,\n  payload: {\n    chats,\n    selectedUser,\n    online\n  }\n});\nexport const getchatsError = error => ({\n  type: GET_CHATS_ERROR,\n  payload: error\n});\nexport const getAllChats = userId => dispatch => {\n  dispatch(beginChats());\n  let chats = chatsData.data;\n  chats = chats.filter(x => x.users.includes(userId));\n  const selectedUser = chats[0].users.find(x => x !== userId);\n  const online = true;\n  dispatch(getChatsSuccess(chats, selectedUser, online));\n  dispatch(updateSelectedUser(selectedUser, online));\n};\nexport const changeChat = userId => ({\n  type: CHANGE_CHAT,\n  payload: userId\n});\nexport const searchMember = keyword => ({\n  type: SEARCH_MEMBER,\n  payload: keyword\n});\nexport const updateSelectedUser = (selectedUser, online) => ({\n  type: UPDATE_SELECTED_USER,\n  payload: {\n    selectedUser,\n    online\n  }\n});\nexport const sendMessageToChat = (currentUserId, selectedUserId, message, allchats, online) => ({\n  type: SEND_MESSAGE,\n  payload: {\n    currentUserId,\n    selectedUserId,\n    message,\n    allchats,\n    online\n  }\n});\nexport const replyMessageToChat = (currentUserId, selectedUserId, message, allchats, online) => ({\n  type: REPLY_BY_SELECTED_USER,\n  payload: {\n    currentUserId,\n    selectedUserId,\n    message,\n    allchats,\n    online\n  }\n});\nexport const sendMessage = (currentUserId, selectedUserId, message, allChats, online) => dispatch => {\n  dispatch(sendMessageToChat(currentUserId, selectedUserId, message, allChats, online));\n  let chat = allChats.find(x => x.users.includes(currentUserId) && x.users.includes(selectedUserId));\n  const now = new Date();\n  const time = now.getHours() + \":\" + now.getMinutes();\n  const status = online;\n\n  if (chat) {\n    chat.messages.push({\n      sender: currentUserId,\n      time: time,\n      text: message,\n      status: true\n    });\n    chat.lastMessageTime = time;\n    chat.online = status;\n    let chats = allChats.filter(x => x.id !== chat.id);\n    chats.splice(0, 0, chat);\n    dispatch(getChatsSuccess(chats, selectedUserId, online));\n  }\n};\nexport const replyByUser = (currentUserId, selectedUserId, message, allChats, online) => dispatch => {\n  dispatch(replyMessageToChat(currentUserId, selectedUserId, message, allChats, online));\n  let chat = allChats.find(x => x.users.includes(currentUserId) && x.users.includes(selectedUserId));\n  const now = new Date();\n  const time = now.getHours() + \":\" + now.getMinutes();\n  const status = online;\n\n  if (chat) {\n    chat.messages.push({\n      sender: selectedUserId,\n      time: time,\n      text: message,\n      status: true\n    });\n    chat.lastMessageTime = time;\n    chat.online = status;\n    let chats = allChats.filter(x => x.id !== chat.id);\n    chats.splice(0, 0, chat);\n    dispatch(getChatsSuccess(chats, selectedUserId, online));\n  }\n};\nexport const createChat = (currentUserId, selectedUserId, allChats) => ({\n  type: CREATE_CHAT,\n  payload: {\n    currentUserId,\n    selectedUserId,\n    allChats\n  }\n});\nexport const createNewChat = (currentUserId, selectedUserId, allChats) => dispatch => {\n  dispatch(createChat(currentUserId, selectedUserId, allChats));\n  let conversation = {\n    id: allChats.length + 1,\n    users: [currentUserId, selectedUserId],\n    lastMessageTime: \"-\",\n    messages: []\n  };\n  allChats.splice(0, 0, conversation);\n  dispatch(getChatsSuccess(allChats, selectedUserId));\n};\nexport const CurrentUserUpdateStatus = currentStatus => ({\n  type: UPDATE_STATUS,\n  payload: currentStatus\n});","map":{"version":3,"sources":["/Users/gimsang-wan/Desktop/Endless-react-admin-template/endless 1/src/actions/chat.action.js"],"names":["GET_MEMBERS","GET_MEMBERS_SUCCESS","GET_CHATS","GET_CHATS_SUCCESS","GET_CHATS_ERROR","CHANGE_CHAT","CREATE_CHAT","SEARCH_MEMBER","SEND_MESSAGE","UPDATE_STATUS","UPDATE_SELECTED_USER","REPLY_BY_SELECTED_USER","contactsData","chatsData","getMembers","type","getMembersSuccess","members","currentUser","payload","getAllMembers","dispatch","beginChats","userId","getChatsSuccess","chats","selectedUser","online","getchatsError","error","getAllChats","data","filter","x","users","includes","find","updateSelectedUser","changeChat","searchMember","keyword","sendMessageToChat","currentUserId","selectedUserId","message","allchats","replyMessageToChat","sendMessage","allChats","chat","now","Date","time","getHours","getMinutes","status","messages","push","sender","text","lastMessageTime","id","splice","replyByUser","createChat","createNewChat","conversation","length","CurrentUserUpdateStatus","currentStatus"],"mappings":"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","sourcesContent":["\nimport {\n    GET_MEMBERS,\n    GET_MEMBERS_SUCCESS,\n    GET_CHATS,\n    GET_CHATS_SUCCESS,\n    GET_CHATS_ERROR,\n    CHANGE_CHAT,\n    CREATE_CHAT,\n    SEARCH_MEMBER,\n    SEND_MESSAGE,\n    UPDATE_STATUS,\n    UPDATE_SELECTED_USER,\n    REPLY_BY_SELECTED_USER\n} from '../constant/actionTypes';\n\n\nimport contactsData from \"../data/chat/chatMember.js\";\nimport chatsData from \"../data/chat/chat.chats.json\";\n\n\n\nexport const getMembers = () => ({\n    type: GET_MEMBERS\n});\n\nexport const getMembersSuccess = (members, currentUser) => {\n    return ({\n        type: GET_MEMBERS_SUCCESS,\n        payload: { members, currentUser }\n    })\n};\n\nexport const getAllMembers = () => dispatch => {\n    dispatch(getMembers());\n    const members = contactsData;\n    const currentUser = members[0];\n    dispatch(getMembersSuccess(members, currentUser));\n};\n\n\nexport const beginChats = (userId) => ({\n    type: GET_CHATS,\n    payload:  userId\n});\nexport const getChatsSuccess = (chats, selectedUser,online) => ({\n    type: GET_CHATS_SUCCESS,\n    payload: { chats, selectedUser,online }\n});\n\nexport const getchatsError = (error) => ({\n    type: GET_CHATS_ERROR,\n    payload: error\n});\n\nexport const getAllChats = (userId) => dispatch => {\n    dispatch(beginChats());\n    let chats = chatsData.data;\n    chats = chats.filter(x => x.users.includes(userId));\n\n    const selectedUser = chats[0].users.find(x => x !== userId);\n    const online = true;\n    dispatch(getChatsSuccess(chats, selectedUser,online));\n    dispatch(updateSelectedUser( selectedUser,online));\n}\n\nexport const changeChat = (userId) => ({\n    type: CHANGE_CHAT,\n    payload: userId\n});\n\nexport const searchMember = (keyword) => ({\n    type: SEARCH_MEMBER,\n    payload: keyword\n});\n\nexport const updateSelectedUser = (selectedUser,online) => ({\n    type:UPDATE_SELECTED_USER,\n    payload:{selectedUser,online}\n})\n\nexport const sendMessageToChat = (currentUserId,selectedUserId,message,allchats,online) => ({\n    type: SEND_MESSAGE,\n    payload: {currentUserId,selectedUserId,message,allchats,online}\n});\n\nexport const replyMessageToChat = (currentUserId,selectedUserId,message,allchats,online) => ({\n    type: REPLY_BY_SELECTED_USER,\n    payload: {currentUserId,selectedUserId,message,allchats,online}\n});\n\nexport const sendMessage = (currentUserId,selectedUserId,message,allChats,online) => dispatch => {\n\n    dispatch(sendMessageToChat(currentUserId,selectedUserId,message,allChats,online));\n    let chat = allChats.find(x => x.users.includes(currentUserId) && x.users.includes(selectedUserId))\n    const now = new Date();\n    const time =  now.getHours() + \":\" + now.getMinutes();\n    const status=online\n    if (chat) {\n        chat.messages.push({\n            sender: currentUserId,\n            time: time,\n            text: message,\n            status:true\n        });\n        chat.lastMessageTime = time;\n        chat.online = status;\n        \n        let chats = (allChats.filter(x => x.id !== chat.id));\n        chats.splice(0, 0, chat)\n\n        dispatch(getChatsSuccess(chats,selectedUserId,online));\n    }\n}\n\nexport const replyByUser = (currentUserId,selectedUserId,message,allChats,online) => dispatch => {\n\n    dispatch(replyMessageToChat(currentUserId,selectedUserId,message,allChats,online));\n    let chat = allChats.find(x => x.users.includes(currentUserId) && x.users.includes(selectedUserId))\n    const now = new Date();\n    const time =  now.getHours() + \":\" + now.getMinutes();\n    const status= online\n    if (chat) {\n        chat.messages.push({\n            sender: selectedUserId,\n            time: time,\n            text: message,\n            status:true\n        });\n        chat.lastMessageTime = time;\n        chat.online = status;\n        let chats = (allChats.filter(x => x.id !== chat.id));\n        chats.splice(0, 0, chat)\n\n        dispatch(getChatsSuccess(chats,selectedUserId,online));\n    }\n}\n\nexport const createChat = (currentUserId,selectedUserId,allChats) => ({\n    type: CREATE_CHAT,\n    payload: {currentUserId,selectedUserId,allChats}\n});\n\nexport const createNewChat = (currentUserId,selectedUserId,allChats) => dispatch => {\n    dispatch(createChat(currentUserId,selectedUserId,allChats));\n\n    let conversation = {\n        id: allChats.length + 1,\n        users: [currentUserId, selectedUserId],\n        lastMessageTime: \"-\",\n        messages: []\n    };\n    allChats.splice(0, 0, conversation)\n\n    dispatch(getChatsSuccess(allChats,selectedUserId));\n}\n\nexport const CurrentUserUpdateStatus = (currentStatus) => ({\n    type: UPDATE_STATUS,\n    payload: currentStatus\n});\n"]},"metadata":{},"sourceType":"module"}