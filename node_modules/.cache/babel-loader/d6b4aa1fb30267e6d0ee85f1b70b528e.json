{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _systemImportTransformerGlobalIdentifier = typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : typeof global !== 'undefined' ? global : {};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _OutsideClickHandler = require('./OutsideClickHandler');\n\nvar _OutsideClickHandler2 = _interopRequireDefault(_OutsideClickHandler);\n\nvar _Button = require('./Common/Button');\n\nvar _Button2 = _interopRequireDefault(_Button);\n\nvar _time = require('../utils/time.js');\n\nvar _time2 = _interopRequireDefault(_time);\n\nvar _language = require('../utils/language');\n\nvar _language2 = _interopRequireDefault(_language);\n\nvar _icons = require('../utils/icons');\n\nvar _icons2 = _interopRequireDefault(_icons);\n\nvar _func = require('../utils/func');\n\nvar _AsyncComponent = require('./Common/AsyncComponent');\n\nvar _AsyncComponent2 = _interopRequireDefault(_AsyncComponent);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar DialPlates = {\n  material: (0, _AsyncComponent2.default)(function () {\n    return (typeof _systemImportTransformerGlobalIdentifier.define === 'function' && _systemImportTransformerGlobalIdentifier.define.amd ? new Promise(function (resolve, reject) {\n      _systemImportTransformerGlobalIdentifier.require(['./MaterialTheme'], resolve, reject);\n    }) : typeof module !== 'undefined' && module.exports && typeof require !== 'undefined' || typeof module !== 'undefined' && module.component && _systemImportTransformerGlobalIdentifier.require && _systemImportTransformerGlobalIdentifier.require.loader === 'component' ? Promise.resolve(require('./MaterialTheme')) : Promise.resolve(_systemImportTransformerGlobalIdentifier['./MaterialTheme'])).then(function (component) {\n      return component.default;\n    });\n  }),\n  classic: (0, _AsyncComponent2.default)(function () {\n    return (typeof _systemImportTransformerGlobalIdentifier.define === 'function' && _systemImportTransformerGlobalIdentifier.define.amd ? new Promise(function (resolve, reject) {\n      _systemImportTransformerGlobalIdentifier.require(['./ClassicTheme'], resolve, reject);\n    }) : typeof module !== 'undefined' && module.exports && typeof require !== 'undefined' || typeof module !== 'undefined' && module.component && _systemImportTransformerGlobalIdentifier.require && _systemImportTransformerGlobalIdentifier.require.loader === 'component' ? Promise.resolve(require('./ClassicTheme')) : Promise.resolve(_systemImportTransformerGlobalIdentifier['./ClassicTheme'])).then(function (component) {\n      return component.default;\n    });\n  })\n}; // aliases for defaultProps readability\n\nvar TIME = _time2.default.time({\n  useTz: false\n});\n\nTIME.current = _time2.default.current();\nvar propTypes = {\n  autoMode: _propTypes2.default.bool,\n  autoClose: _propTypes2.default.bool,\n  colorPalette: _propTypes2.default.string,\n  draggable: _propTypes2.default.bool,\n  focused: _propTypes2.default.bool,\n  language: _propTypes2.default.string,\n  meridiem: _propTypes2.default.string,\n  onFocusChange: _propTypes2.default.func,\n  onTimeChange: _propTypes2.default.func,\n  onTimezoneChange: _propTypes2.default.func,\n  phrases: _propTypes2.default.object,\n  placeholder: _propTypes2.default.string,\n  showTimezone: _propTypes2.default.bool,\n  theme: _propTypes2.default.string,\n  time: _propTypes2.default.string,\n  timeMode: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n  timezone: _propTypes2.default.string,\n  timezoneIsEditable: _propTypes2.default.bool,\n  trigger: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.object, _propTypes2.default.element, _propTypes2.default.array, _propTypes2.default.node, _propTypes2.default.instanceOf(_react2.default.Component), _propTypes2.default.instanceOf(_react2.default.PureComponent)]),\n  withoutIcon: _propTypes2.default.bool,\n  minuteStep: _propTypes2.default.number,\n  limitDrag: _propTypes2.default.bool,\n  timeFormat: _propTypes2.default.string,\n  timeFormatter: _propTypes2.default.func,\n  useTz: _propTypes2.default.bool,\n  closeOnOutsideClick: _propTypes2.default.bool,\n  timeConfig: _propTypes2.default.object,\n  disabled: _propTypes2.default.bool,\n  focusDropdownOnTime: _propTypes2.default.bool\n};\nvar defaultProps = {\n  autoMode: true,\n  autoClose: true,\n  colorPalette: 'light',\n  draggable: true,\n  focused: false,\n  language: 'en',\n  meridiem: TIME.meridiem,\n  onFocusChange: Function.prototype,\n  onTimeChange: Function.prototype,\n  onTimezoneChange: Function.prototype,\n  placeholder: '',\n  showTimezone: false,\n  theme: 'material',\n  time: '',\n  timeMode: TIME.mode,\n  trigger: null,\n  withoutIcon: false,\n  minuteStep: 5,\n  limitDrag: false,\n  timeFormat: '',\n  timeFormatter: null,\n  useTz: true,\n  closeOnOutsideClick: true,\n  timeConfig: {\n    step: 30,\n    unit: 'minutes'\n  },\n  disabled: false,\n  focusDropdownOnTime: true\n};\n\nvar TimePicker = function (_React$PureComponent) {\n  _inherits(TimePicker, _React$PureComponent);\n\n  function TimePicker(props) {\n    _classCallCheck(this, TimePicker);\n\n    var _this = _possibleConstructorReturn(this, (TimePicker.__proto__ || Object.getPrototypeOf(TimePicker)).call(this, props));\n\n    var focused = props.focused,\n        timezone = props.timezone,\n        onTimezoneChange = props.onTimezoneChange;\n\n    var timeData = _this.timeData(false);\n\n    var timezoneData = _time2.default.tzForName(timeData.timezone);\n\n    _this.state = {\n      focused: focused,\n      timezoneData: timezoneData,\n      timeChanged: false\n    };\n    _this.onBlur = _this.onBlur.bind(_this);\n    _this.onFocus = _this.onFocus.bind(_this);\n    _this.timeData = _this.timeData.bind(_this);\n    _this.handleTimeChange = _this.handleTimeChange.bind(_this);\n    _this.handleHourChange = _this.handleHourChange.bind(_this);\n    _this.handleMinuteChange = _this.handleMinuteChange.bind(_this);\n    _this.handleMeridiemChange = _this.handleMeridiemChange.bind(_this);\n    _this.handleHourAndMinuteChange = _this.handleHourAndMinuteChange.bind(_this); // if a timezone value was not passed in,\n    // call the callback with the default value used for timezone\n\n    if (!timezone) {\n      onTimezoneChange(timezoneData);\n    }\n\n    return _this;\n  }\n\n  _createClass(TimePicker, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var focused = nextProps.focused;\n\n      if (focused !== this.props.focused) {\n        this.setState({\n          focused: focused\n        });\n      }\n    }\n  }, {\n    key: 'onFocus',\n    value: function onFocus() {\n      var focused = this.state.focused;\n\n      if (!focused) {\n        this.onFocusChange(!focused);\n      }\n    }\n  }, {\n    key: 'onBlur',\n    value: function onBlur() {\n      var focused = this.state.focused;\n\n      if (focused) {\n        this.onFocusChange(!focused);\n      }\n    }\n  }, {\n    key: 'onFocusChange',\n    value: function onFocusChange(focused) {\n      var disabled = this.props.disabled;\n      if (disabled) return;\n      this.setState({\n        focused: focused\n      });\n      var onFocusChange = this.props.onFocusChange;\n      onFocusChange && onFocusChange(focused);\n    }\n  }, {\n    key: 'timeData',\n    value: function timeData(timeChanged) {\n      var _props = this.props,\n          time = _props.time,\n          useTz = _props.useTz,\n          timeMode = _props.timeMode,\n          timezone = _props.timezone,\n          meridiem = _props.meridiem;\n\n      var timeData = _time2.default.time({\n        time: time,\n        meridiem: meridiem,\n        timeMode: timeMode,\n        tz: timezone,\n        useTz: !time && !timeChanged && useTz\n      });\n\n      return timeData;\n    }\n  }, {\n    key: 'onTimeChanged',\n    value: function onTimeChanged(timeChanged) {\n      this.setState({\n        timeChanged: timeChanged\n      });\n    }\n  }, {\n    key: 'handleHourChange',\n    value: function handleHourChange(hour) {\n      var validateHour = _time2.default.validate(hour);\n\n      var minute = this.hourAndMinute[1];\n      this.handleTimeChange({\n        hour: validateHour,\n        minute: minute,\n        meridiem: this.meridiem\n      });\n    }\n  }, {\n    key: 'handleMinuteChange',\n    value: function handleMinuteChange(minute) {\n      var validateMinute = _time2.default.validate(minute);\n\n      var hour = this.hourAndMinute[0];\n      this.handleTimeChange({\n        hour: hour,\n        minute: validateMinute,\n        meridiem: this.meridiem\n      });\n    }\n  }, {\n    key: 'handleMeridiemChange',\n    value: function handleMeridiemChange(meridiem) {\n      var _hourAndMinute = _slicedToArray(this.hourAndMinute, 2),\n          hour = _hourAndMinute[0],\n          minute = _hourAndMinute[1];\n\n      this.handleTimeChange({\n        hour: hour,\n        minute: minute,\n        meridiem: meridiem\n      });\n    }\n  }, {\n    key: 'handleTimeChange',\n    value: function handleTimeChange(options) {\n      var onTimeChange = this.props.onTimeChange;\n      onTimeChange && onTimeChange(options);\n      this.onTimeChanged(true);\n    }\n  }, {\n    key: 'handleHourAndMinuteChange',\n    value: function handleHourAndMinuteChange(time) {\n      this.onTimeChanged(true);\n      var _props2 = this.props,\n          onTimeChange = _props2.onTimeChange,\n          autoClose = _props2.autoClose;\n      if (autoClose) this.onBlur();\n      return onTimeChange && onTimeChange(time);\n    }\n  }, {\n    key: 'renderDialPlate',\n    value: function renderDialPlate() {\n      var _props3 = this.props,\n          theme = _props3.theme,\n          disabled = _props3.disabled,\n          timeMode = _props3.timeMode,\n          autoMode = _props3.autoMode,\n          autoClose = _props3.autoClose,\n          draggable = _props3.draggable,\n          language = _props3.language,\n          limitDrag = _props3.limitDrag,\n          minuteStep = _props3.minuteStep,\n          timeConfig = _props3.timeConfig,\n          colorPalette = _props3.colorPalette,\n          showTimezone = _props3.showTimezone,\n          onTimezoneChange = _props3.onTimezoneChange,\n          timezoneIsEditable = _props3.timezoneIsEditable,\n          focusDropdownOnTime = _props3.focusDropdownOnTime;\n      if (disabled) return null;\n      var dialTheme = theme === 'material' ? theme : 'classic';\n      var DialPlate = DialPlates[dialTheme];\n      var timezoneData = this.state.timezoneData;\n\n      var _hourAndMinute2 = _slicedToArray(this.hourAndMinute, 2),\n          hour = _hourAndMinute2[0],\n          minute = _hourAndMinute2[1];\n\n      return _react2.default.createElement(DialPlate, {\n        hour: hour,\n        minute: minute,\n        autoMode: autoMode,\n        autoClose: autoClose,\n        language: language,\n        draggable: draggable,\n        limitDrag: limitDrag,\n        timezone: timezoneData,\n        meridiem: this.meridiem,\n        timeConfig: timeConfig,\n        showTimezone: showTimezone,\n        phrases: this.languageData,\n        colorPalette: colorPalette,\n        clearFocus: this.onBlur,\n        timeMode: parseInt(timeMode, 10),\n        onTimezoneChange: onTimezoneChange,\n        minuteStep: parseInt(minuteStep, 10),\n        timezoneIsEditable: timezoneIsEditable,\n        handleHourChange: this.handleHourChange,\n        handleTimeChange: this.handleTimeChange,\n        handleMinuteChange: this.handleMinuteChange,\n        handleMeridiemChange: this.handleMeridiemChange,\n        focusDropdownOnTime: focusDropdownOnTime\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props4 = this.props,\n          trigger = _props4.trigger,\n          disabled = _props4.disabled,\n          placeholder = _props4.placeholder,\n          withoutIcon = _props4.withoutIcon,\n          colorPalette = _props4.colorPalette,\n          closeOnOutsideClick = _props4.closeOnOutsideClick;\n      var focused = this.state.focused;\n      var times = this.formattedTime;\n      var pickerPreviewClass = (0, _classnames2.default)('time_picker_preview', focused && 'active', disabled && 'disabled');\n      var containerClass = (0, _classnames2.default)('time_picker_container', colorPalette === 'dark' && 'dark');\n      var previewContainerClass = (0, _classnames2.default)('preview_container', withoutIcon && 'without_icon');\n      return _react2.default.createElement('div', {\n        className: containerClass\n      }, trigger || _react2.default.createElement(_Button2.default, {\n        onClick: this.onFocus,\n        className: pickerPreviewClass\n      }, _react2.default.createElement('div', {\n        className: previewContainerClass\n      }, withoutIcon ? '' : _icons2.default.time, placeholder || times)), _react2.default.createElement(_OutsideClickHandler2.default, {\n        focused: focused,\n        onOutsideClick: this.onBlur,\n        closeOnOutsideClick: disabled ? false : closeOnOutsideClick\n      }, this.renderDialPlate()));\n    }\n  }, {\n    key: 'languageData',\n    get: function get() {\n      var _props5 = this.props,\n          language = _props5.language,\n          _props5$phrases = _props5.phrases,\n          phrases = _props5$phrases === undefined ? {} : _props5$phrases;\n      return Object.assign({}, _language2.default.get(language), phrases);\n    }\n  }, {\n    key: 'hourAndMinute',\n    get: function get() {\n      var timeMode = this.props.timeMode;\n      var timeData = this.timeData(this.state.timeChanged); // Since someone might pass a time in 24h format, etc., we need to get it from\n      // timeData to 'translate' it into the local format, including its accurate meridiem\n\n      var hour = parseInt(timeMode, 10) === 12 ? parseInt(timeData.hour12, 10) === 12 ? '00' : timeData.hour12 : parseInt(timeData.hour24, 10) === 24 ? '00' : timeData.hour24;\n      var minute = timeData.minute;\n      return [hour, minute];\n    }\n  }, {\n    key: 'formattedTime',\n    get: function get() {\n      var _props6 = this.props,\n          timeMode = _props6.timeMode,\n          timeFormat = _props6.timeFormat,\n          timeFormatter = _props6.timeFormatter;\n\n      var _hourAndMinute3 = _slicedToArray(this.hourAndMinute, 2),\n          hour = _hourAndMinute3[0],\n          minute = _hourAndMinute3[1];\n\n      var validTimeMode = _time2.default.validateTimeMode(timeMode);\n\n      var times = '';\n\n      if (timeFormatter && _func.is.func(timeFormatter)) {\n        times = timeFormatter({\n          hour: hour,\n          minute: minute,\n          meridiem: this.meridiem\n        });\n      } else if (timeFormat && _func.is.string(timeFormat)) {\n        times = timeFormat;\n\n        if (/HH?/.test(times) || /MM?/.test(times)) {\n          if (validTimeMode === 12) {\n            console.warn('It seems you are using 12 hours mode with 24 hours time format. Please check your timeMode and timeFormat props');\n          }\n        } else if (/hh?/.test(times) || /mm?/.test(times)) {\n          if (validTimeMode === 24) {\n            console.warn('It seems you are using 24 hours mode with 12 hours time format. Please check your timeMode and timeFormat props');\n          }\n        }\n\n        times = times.replace(/(HH|hh)/g, hour);\n        times = times.replace(/(MM|mm)/g, minute);\n        times = times.replace(/(H|h)/g, Number(hour));\n        times = times.replace(/(M|m)/g, Number(minute));\n      } else {\n        times = validTimeMode === 12 ? hour + ' : ' + minute + ' ' + this.meridiem : hour + ' : ' + minute;\n      }\n\n      return times;\n    }\n  }, {\n    key: 'meridiem',\n    get: function get() {\n      var meridiem = this.props.meridiem;\n      var timeData = this.timeData(this.state.timeChanged);\n      var localMessages = this.languageData; // eslint-disable-next-line no-unneeded-ternary\n\n      var m = meridiem ? meridiem : timeData.meridiem; // eslint-disable-next-line no-extra-boolean-cast\n\n      return m && !!m.match(/^am|pm/i) ? localMessages[m.toLowerCase()] : m;\n    }\n  }]);\n\n  return TimePicker;\n}(_react2.default.PureComponent);\n\nTimePicker.propTypes = propTypes;\nTimePicker.defaultProps = defaultProps;\nexports.default = TimePicker;","map":null,"metadata":{},"sourceType":"script"}