{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _constant = require('../../utils/constant.js');\n\nvar _time = require('../../utils/time');\n\nvar _time2 = _interopRequireDefault(_time);\n\nvar _Button = require('../Common/Button');\n\nvar _Button2 = _interopRequireDefault(_Button);\n\nvar _PickerDragHandler = require('../Picker/PickerDragHandler');\n\nvar _PickerDragHandler2 = _interopRequireDefault(_PickerDragHandler);\n\nvar _PickerPointGenerator = require('../Picker/PickerPointGenerator');\n\nvar _PickerPointGenerator2 = _interopRequireDefault(_PickerPointGenerator);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar TIME = _time2.default.time();\n\nvar propTypes = {\n  hour: _propTypes2.default.string,\n  language: _propTypes2.default.string,\n  minute: _propTypes2.default.string,\n  draggable: _propTypes2.default.bool,\n  meridiem: _propTypes2.default.string,\n  phrases: _propTypes2.default.object,\n  handleHourChange: _propTypes2.default.func,\n  handleMinuteChange: _propTypes2.default.func\n};\nvar defaultProps = {\n  hour: TIME.hour12,\n  language: 'en',\n  minute: TIME.minute,\n  draggable: false,\n  meridiem: TIME.meridiem,\n  handleHourChange: Function.prototype,\n  handleMinuteChange: Function.prototype\n};\n\nvar TwelveHoursMode = function (_React$PureComponent) {\n  _inherits(TwelveHoursMode, _React$PureComponent);\n\n  function TwelveHoursMode(props) {\n    _classCallCheck(this, TwelveHoursMode);\n\n    var _this = _possibleConstructorReturn(this, (TwelveHoursMode.__proto__ || Object.getPrototypeOf(TwelveHoursMode)).call(this, props));\n\n    var hourPointerRotate = _this.resetHourDegree();\n\n    var minutePointerRotate = _this.resetMinuteDegree();\n\n    _this.state = {\n      hourPointerRotate: hourPointerRotate,\n      minutePointerRotate: minutePointerRotate\n    };\n    _this.handleHourChange = _this.handleHourChange.bind(_this);\n    _this.handleMinuteChange = _this.handleMinuteChange.bind(_this);\n    _this.handleDegreeChange = _this.handleDegreeChange.bind(_this);\n    _this.handleMeridiemChange = _this.handleMeridiemChange.bind(_this);\n    _this.handleHourPointerClick = _this.handleHourPointerClick.bind(_this);\n    _this.handleMinutePointerClick = _this.handleMinutePointerClick.bind(_this);\n    return _this;\n  }\n\n  _createClass(TwelveHoursMode, [{\n    key: 'resetHourDegree',\n    value: function resetHourDegree() {\n      var hour = parseInt(this.props.hour, 10);\n      var pointerRotate = 0;\n\n      _constant.TWELVE_HOURS.forEach(function (h, index) {\n        if (hour === index + 1) {\n          pointerRotate = 360 * (index + 1) / 12;\n        }\n      });\n\n      return pointerRotate;\n    }\n  }, {\n    key: 'resetMinuteDegree',\n    value: function resetMinuteDegree() {\n      var minute = parseInt(this.props.minute, 10);\n      var pointerRotate = 0;\n\n      _constant.MINUTES.forEach(function (m, index) {\n        if (minute === index) {\n          pointerRotate = 360 * index / 60;\n        }\n      });\n\n      return pointerRotate;\n    }\n  }, {\n    key: 'getHourTopAndHeight',\n    value: function getHourTopAndHeight() {\n      var height = _constant.MIN_ABSOLUTE_POSITION - _constant.POINTER_RADIUS;\n      var top = _constant.PICKER_RADIUS - _constant.MIN_ABSOLUTE_POSITION + _constant.POINTER_RADIUS;\n      return [top, height];\n    }\n  }, {\n    key: 'getMinuteTopAndHeight',\n    value: function getMinuteTopAndHeight() {\n      var height = _constant.MAX_ABSOLUTE_POSITION - _constant.POINTER_RADIUS;\n      var top = _constant.PICKER_RADIUS - _constant.MAX_ABSOLUTE_POSITION + _constant.POINTER_RADIUS;\n      return [top, height];\n    }\n  }, {\n    key: 'handleMeridiemChange',\n    value: function handleMeridiemChange() {\n      var _props = this.props,\n          meridiem = _props.meridiem,\n          phrases = _props.phrases;\n      var newMeridiem = meridiem === 'AM' || meridiem === phrases.am ? phrases.pm : phrases.am;\n\n      if (newMeridiem !== meridiem) {\n        var handleMeridiemChange = this.props.handleMeridiemChange;\n        handleMeridiemChange && handleMeridiemChange(newMeridiem);\n      }\n    }\n  }, {\n    key: 'handleHourPointerClick',\n    value: function handleHourPointerClick(options) {\n      var time = options.time,\n          _options$pointerRotat = options.pointerRotate,\n          pointerRotate = _options$pointerRotat === undefined ? null : _options$pointerRotat;\n      this.handleHourChange(time);\n      pointerRotate !== null && this.handleDegreeChange({\n        hourPointerRotate: pointerRotate\n      });\n    }\n  }, {\n    key: 'handleMinutePointerClick',\n    value: function handleMinutePointerClick(options) {\n      var time = options.time,\n          _options$pointerRotat2 = options.pointerRotate,\n          pointerRotate = _options$pointerRotat2 === undefined ? null : _options$pointerRotat2;\n      this.handleMinuteChange(time);\n      pointerRotate !== null && this.handleDegreeChange({\n        minutePointerRotate: pointerRotate\n      });\n    }\n  }, {\n    key: 'handleDegreeChange',\n    value: function handleDegreeChange(pointerRotate) {\n      this.setState(pointerRotate);\n    }\n  }, {\n    key: 'handleHourChange',\n    value: function handleHourChange(time) {\n      var hour = parseInt(time, 10);\n      var handleHourChange = this.props.handleHourChange;\n      handleHourChange && handleHourChange(hour);\n    }\n  }, {\n    key: 'handleMinuteChange',\n    value: function handleMinuteChange(time) {\n      var minute = parseInt(time, 10);\n      var handleMinuteChange = this.props.handleMinuteChange;\n      handleMinuteChange && handleMinuteChange(minute);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props,\n          hour = _props2.hour,\n          minute = _props2.minute,\n          phrases = _props2.phrases,\n          timeMode = _props2.timeMode,\n          meridiem = _props2.meridiem,\n          draggable = _props2.draggable,\n          clearFocus = _props2.clearFocus,\n          limitDrag = _props2.limitDrag,\n          minuteStep = _props2.minuteStep,\n          showTimezone = _props2.showTimezone;\n      var _state = this.state,\n          hourPointerRotate = _state.hourPointerRotate,\n          minutePointerRotate = _state.minutePointerRotate;\n\n      var _getHourTopAndHeight = this.getHourTopAndHeight(),\n          _getHourTopAndHeight2 = _slicedToArray(_getHourTopAndHeight, 2),\n          top = _getHourTopAndHeight2[0],\n          height = _getHourTopAndHeight2[1];\n\n      var hourRotateState = {\n        top: top,\n        height: height,\n        pointerRotate: hourPointerRotate\n      };\n\n      var _getMinuteTopAndHeigh = this.getMinuteTopAndHeight(),\n          _getMinuteTopAndHeigh2 = _slicedToArray(_getMinuteTopAndHeigh, 2),\n          minuteTop = _getMinuteTopAndHeigh2[0],\n          minuteHeight = _getMinuteTopAndHeigh2[1];\n\n      var minuteRotateState = {\n        top: minuteTop,\n        height: minuteHeight,\n        pointerRotate: minutePointerRotate\n      };\n      var HourPickerPointGenerator = (0, _PickerPointGenerator2.default)('hour', 12);\n      var MinutePickerPointGenerator = (0, _PickerPointGenerator2.default)('minute', 12);\n      return _react2.default.createElement(_react2.default.Fragment, null, _react2.default.createElement('div', {\n        className: 'time_picker_modal_header'\n      }, _react2.default.createElement('span', {\n        className: 'time_picker_header active'\n      }, hour, ':', minute), '\\xA0', _react2.default.createElement('span', {\n        onClick: this.handleMeridiemChange,\n        className: 'time_picker_header meridiem'\n      }, meridiem)), _react2.default.createElement('div', {\n        className: 'picker_container'\n      }, _react2.default.createElement(HourPickerPointGenerator, {\n        handleTimePointerClick: this.handleHourPointerClick,\n        pointerRotate: hourPointerRotate\n      }), _react2.default.createElement(MinutePickerPointGenerator, {\n        handleTimePointerClick: this.handleMinutePointerClick,\n        pointerRotate: minutePointerRotate\n      }), _react2.default.createElement(_PickerDragHandler2.default, {\n        step: 1,\n        timeMode: timeMode,\n        limitDrag: limitDrag,\n        minuteStep: minuteStep,\n        rotateState: minuteRotateState,\n        time: parseInt(minute, 10),\n        minLength: _constant.MAX_ABSOLUTE_POSITION,\n        draggable: draggable,\n        handleTimePointerClick: this.handleMinutePointerClick\n      }), _react2.default.createElement(_PickerDragHandler2.default, {\n        step: 0,\n        timeMode: timeMode,\n        limitDrag: limitDrag,\n        minuteStep: minuteStep,\n        rotateState: hourRotateState,\n        time: parseInt(hour, 10),\n        maxLength: _constant.MIN_ABSOLUTE_POSITION,\n        draggable: draggable,\n        handleTimePointerClick: this.handleHourPointerClick\n      })), !showTimezone ? _react2.default.createElement('div', {\n        className: 'buttons_wrapper'\n      }, _react2.default.createElement(_Button2.default, {\n        onClick: clearFocus,\n        className: 'time_picker_button'\n      }, phrases.close)) : null);\n    }\n  }]);\n\n  return TwelveHoursMode;\n}(_react2.default.PureComponent);\n\nTwelveHoursMode.propTypes = propTypes;\nTwelveHoursMode.defaultProps = defaultProps;\nexports.default = TwelveHoursMode;","map":null,"metadata":{},"sourceType":"script"}