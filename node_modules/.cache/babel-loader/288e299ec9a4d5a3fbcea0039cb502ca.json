{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _constant = require('../../utils/constant.js');\n\nvar _drag = require('../../utils/drag');\n\nvar _drag2 = _interopRequireDefault(_drag);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar propTypes = {\n  time: _propTypes2.default.number,\n  step: _propTypes2.default.number,\n  draggable: _propTypes2.default.bool,\n  pointerRotate: _propTypes2.default.number,\n  minLength: _propTypes2.default.number,\n  maxLength: _propTypes2.default.number,\n  minuteStep: _propTypes2.default.number,\n  limitDrag: _propTypes2.default.bool,\n  rotateState: _propTypes2.default.shape({\n    top: _propTypes2.default.number,\n    height: _propTypes2.default.number,\n    pointerRotate: _propTypes2.default.number\n  }),\n  handleTimePointerClick: _propTypes2.default.func\n};\nvar defaultProps = {\n  time: 0,\n  step: 0,\n  pointerRotate: 0,\n  rotateState: {\n    top: 0,\n    height: 0,\n    pointerRotate: 0\n  },\n  minLength: _constant.MIN_ABSOLUTE_POSITION,\n  maxLength: _constant.MAX_ABSOLUTE_POSITION,\n  minuteStep: 5,\n  limitDrag: false,\n  handleTimePointerClick: Function.prototype\n};\n\nvar PickerDragHandler = function (_React$PureComponent) {\n  _inherits(PickerDragHandler, _React$PureComponent);\n\n  function PickerDragHandler(props) {\n    _classCallCheck(this, PickerDragHandler);\n\n    var _this = _possibleConstructorReturn(this, (PickerDragHandler.__proto__ || Object.getPrototypeOf(PickerDragHandler)).call(this, props));\n\n    _this.startX = 0;\n    _this.startY = 0;\n    _this.originX = null;\n    _this.originY = null;\n    _this.dragCenterX = null;\n    _this.dragCenterY = null;\n    _this.offsetDragCenterX = 0;\n    _this.offsetDragCenterY = 0;\n    _this.state = _this.initialRotationAndLength();\n    _this.handleMouseDown = _this.handleMouseDown.bind(_this);\n    _this.handleMouseMove = _this.handleMouseMove.bind(_this);\n    _this.handleMouseUp = _this.handleMouseUp.bind(_this);\n    _this.resetOrigin = _this.resetOrigin.bind(_this);\n    return _this;\n  }\n\n  _createClass(PickerDragHandler, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.resetOrigin();\n\n      if (window.addEventListener) {\n        window.addEventListener('resize', this.resetOrigin, true);\n      } else {\n        window.addEventListener('onresize', this.resetOrigin);\n      }\n\n      if (document.addEventListener) {\n        document.addEventListener('scroll', this.resetOrigin, true);\n        document.addEventListener('mousemove', this.handleMouseMove, true);\n        document.addEventListener('mouseup', this.handleMouseUp, true);\n        document.addEventListener('touchmove', this.handleMouseMove, true);\n        document.addEventListener('touchend', this.handleMouseUp, true);\n      } else {\n        document.addEventListener('onscroll', this.resetOrigin);\n        document.attachEvent('onmousemove', this.handleMouseMove);\n        document.attachEvent('onmouseup', this.handleMouseUp);\n        document.attachEvent('ontouchmove', this.handleMouseMove);\n        document.attachEvent('ontouchend', this.handleMouseUp);\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (window.addEventListener) {\n        window.removeEventListener('resize', this.resetOrigin, true);\n      } else {\n        window.detachEvent('onresize', this.resetOrigin);\n      }\n\n      if (document.removeEventListener) {\n        document.removeEventListener('scroll', this.resetOrigin, true);\n        document.removeEventListener('mousemove', this.handleMouseMove, true);\n        document.removeEventListener('mouseup', this.handleMouseUp, true);\n        document.removeEventListener('touchmove', this.handleMouseMove, true);\n        document.removeEventListener('touchend', this.handleMouseUp, true);\n      } else {\n        document.detachEvent('onscroll', this.resetOrigin);\n        document.detachEvent('onmousemove', this.handleMouseMove);\n        document.detachEvent('onmouseup', this.handleMouseUp);\n        document.detachEvent('ontouchmove', this.handleMouseMove);\n        document.detachEvent('ontouchend', this.handleMouseUp);\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var _props = this.props,\n          step = _props.step,\n          time = _props.time,\n          rotateState = _props.rotateState;\n      var draging = this.state.draging;\n      var prevStep = prevProps.step;\n      var prevTime = prevProps.time;\n      var PrevRotateState = prevProps.rotateState;\n\n      if ((step !== prevStep || time !== prevTime || rotateState.pointerRotate !== PrevRotateState.pointerRotate) && !draging) {\n        this.resetState();\n      }\n    }\n  }, {\n    key: 'initialRotationAndLength',\n    value: function initialRotationAndLength() {\n      var rotateState = this.props.rotateState;\n      var top = rotateState.top,\n          height = rotateState.height,\n          pointerRotate = rotateState.pointerRotate;\n      this.initialHeight = height;\n      return {\n        top: top,\n        height: height,\n        pointerRotate: pointerRotate,\n        draging: false\n      };\n    }\n  }, {\n    key: 'resetState',\n    value: function resetState() {\n      this.setState(this.initialRotationAndLength());\n    }\n  }, {\n    key: 'resetOrigin',\n    value: function resetOrigin() {\n      var centerPoint = this.pickerCenter;\n      var centerPointPos = centerPoint.getBoundingClientRect();\n      this.originX = centerPointPos.left + centerPoint.clientWidth / 2 + Math.max(document.documentElement.scrollLeft, document.body.scrollLeft) + _constant.POINTER_RADIUS;\n      this.originY = centerPointPos.top + centerPoint.clientHeight / 2 + Math.max(document.documentElement.scrollTop, document.body.scrollTop) + _constant.POINTER_RADIUS;\n      this.resetDragCenter();\n    }\n  }, {\n    key: 'resetDragCenter',\n    value: function resetDragCenter() {\n      this.offsetDragCenterX = 0;\n      this.offsetDragCenterY = 0;\n      var dragCenterPoint = this.dragCenter;\n      var dragCenterPointPos = dragCenterPoint.getBoundingClientRect();\n      this.dragCenterX = dragCenterPointPos.left + dragCenterPoint.clientWidth / 2 + Math.max(document.documentElement.scrollLeft, document.body.scrollLeft);\n      this.dragCenterY = dragCenterPointPos.top + dragCenterPoint.clientHeight / 2 + Math.max(document.documentElement.scrollTop, document.body.scrollTop);\n    }\n  }, {\n    key: 'getRadian',\n    value: function getRadian(x, y) {\n      var sRad = Math.atan2(y - this.originY, x - this.originX);\n      sRad -= Math.atan2(this.startY - this.originY, this.startX - this.originX);\n\n      if (sRad > Math.PI) {\n        sRad -= Math.PI * 2;\n      } else if (sRad < -Math.PI) {\n        sRad += Math.PI * 2;\n      }\n\n      sRad += _drag2.default.degree2Radian(this.props.rotateState.pointerRotate);\n      return sRad;\n    }\n  }, {\n    key: 'getAbsolutePosition',\n    value: function getAbsolutePosition(x, y) {\n      return Math.sqrt(Math.pow(x - this.originX, 2) + Math.pow(y - this.originY, 2));\n    }\n  }, {\n    key: 'getPointerRotate',\n    value: function getPointerRotate() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var dragX = options.dragX,\n          dragY = options.dragY;\n      var _props2 = this.props,\n          step = _props2.step,\n          limitDrag = _props2.limitDrag,\n          minuteStep = _props2.minuteStep;\n      var sRad = this.getRadian(dragX, dragY);\n      var pointerRotate = sRad * (360 / (2 * Math.PI));\n\n      if (limitDrag) {\n        var degree = sRad * (360 / (2 * Math.PI));\n        var isHour = step === 0;\n        var sectionCount = isHour ? 12 : 60 / minuteStep;\n        var roundSeg = Math.round(degree / (360 / sectionCount));\n        pointerRotate = roundSeg * (360 / sectionCount);\n      }\n\n      return pointerRotate;\n    }\n  }, {\n    key: 'handleTimePointerChange',\n    value: function handleTimePointerChange() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var dragX = options.dragX,\n          dragY = options.dragY,\n          _options$autoMode = options.autoMode,\n          autoMode = _options$autoMode === undefined ? null : _options$autoMode,\n          _options$pointerRotat = options.pointerRotate,\n          pointerRotate = _options$pointerRotat === undefined ? null : _options$pointerRotat;\n      var _props3 = this.props,\n          step = _props3.step,\n          timeMode = _props3.timeMode,\n          minLength = _props3.minLength,\n          maxLength = _props3.maxLength,\n          minuteStep = _props3.minuteStep,\n          handleTimePointerClick = _props3.handleTimePointerClick;\n      var sRad = this.getRadian(dragX, dragY);\n      var degree = sRad * (360 / (2 * Math.PI));\n      var isHour = step === 0;\n      var sectionCount = isHour ? 12 : 60 / minuteStep;\n      var roundSeg = Math.round(degree / (360 / sectionCount));\n      var absolutePosition = this.getAbsolutePosition(dragX, dragY);\n      absolutePosition = _drag2.default.validatePosition(absolutePosition, minLength, maxLength);\n\n      if (minLength < absolutePosition && absolutePosition < maxLength) {\n        if (absolutePosition - minLength > (maxLength - minLength) / 2) {\n          absolutePosition = maxLength;\n        } else {\n          absolutePosition = minLength;\n        }\n      }\n\n      while (roundSeg > sectionCount) {\n        roundSeg -= sectionCount;\n      }\n\n      var time = absolutePosition === minLength ? roundSeg : roundSeg + sectionCount;\n\n      if (isHour) {\n        if (absolutePosition === minLength && time < 0) {\n          time += 12;\n        } else if (absolutePosition !== minLength && time < 12) {\n          time = 24 + (time - 12);\n        }\n\n        time = time === 24 ? 12 : time;\n        if (time === 12 && Number(timeMode) === 12) time = 0;\n      } else {\n        time = time * minuteStep === 60 ? 0 : time * minuteStep;\n        time = time < 0 ? 60 + time : time;\n      }\n\n      handleTimePointerClick && handleTimePointerClick({\n        time: time,\n        autoMode: autoMode,\n        pointerRotate: pointerRotate\n      });\n    }\n  }, {\n    key: 'handleMouseDown',\n    value: function handleMouseDown(e) {\n      if (!this.state.draging) {\n        var event = e || window.event;\n        event.preventDefault();\n        event.stopPropagation();\n\n        var pos = _drag2.default.mousePosition(event);\n\n        this.startX = pos.x;\n        this.startY = pos.y;\n        this.resetDragCenter();\n        this.offsetDragCenterX = this.dragCenterX - this.startX;\n        this.offsetDragCenterY = this.dragCenterY - this.startY;\n        this.setState({\n          draging: true\n        });\n      }\n    }\n  }, {\n    key: 'handleMouseMove',\n    value: function handleMouseMove(e) {\n      if (this.state.draging) {\n        var _props4 = this.props,\n            minLength = _props4.minLength,\n            maxLength = _props4.maxLength;\n\n        var pos = _drag2.default.mousePosition(e);\n\n        var dragX = pos.x + this.offsetDragCenterX;\n        var dragY = pos.y + this.offsetDragCenterY;\n\n        if (this.originX !== dragX && this.originY !== dragY) {\n          var pointerRotate = this.getPointerRotate({\n            dragX: dragX,\n            dragY: dragY\n          });\n          var absolutePosition = this.getAbsolutePosition(dragX, dragY);\n\n          var height = _drag2.default.validatePosition(absolutePosition, minLength - _constant.POINTER_RADIUS, maxLength - _constant.POINTER_RADIUS);\n\n          var top = _constant.PICKER_RADIUS - height;\n          this.setState({\n            top: top,\n            height: height,\n            pointerRotate: pointerRotate\n          });\n          this.handleTimePointerChange({\n            dragX: dragX,\n            dragY: dragY,\n            autoMode: false\n          });\n        }\n      }\n    }\n  }, {\n    key: 'handleMouseUp',\n    value: function handleMouseUp(e) {\n      if (this.state.draging) {\n        this.setState({\n          draging: false\n        });\n\n        var pos = _drag2.default.mousePosition(e);\n\n        var endX = pos.x + this.offsetDragCenterX;\n        var endY = pos.y + this.offsetDragCenterY;\n        var pointerRotate = this.getPointerRotate({\n          dragX: endX,\n          dragY: endY\n        });\n        var remainder = pointerRotate % 30;\n        var base = Math.floor(pointerRotate / 30);\n        pointerRotate = (base + (remainder >= 15 ? 1 : 0)) * 30;\n        this.setState({\n          pointerRotate: pointerRotate\n        });\n        this.handleTimePointerChange({\n          dragX: endX,\n          dragY: endY,\n          pointerRotate: pointerRotate\n        });\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props5 = this.props,\n          time = _props5.time,\n          draggable = _props5.draggable;\n      var _state = this.state,\n          draging = _state.draging,\n          height = _state.height,\n          top = _state.top,\n          pointerRotate = _state.pointerRotate;\n      var pickerPointerClass = draging ? 'picker_pointer' : 'picker_pointer animation';\n      return _react2.default.createElement('div', {\n        className: 'picker_handler'\n      }, _react2.default.createElement('div', {\n        className: pickerPointerClass,\n        style: _drag2.default.initialPointerStyle(height, top, pointerRotate)\n      }, _react2.default.createElement('div', {\n        ref: function ref(r) {\n          return _this2.dragCenter = r;\n        },\n        className: 'pointer_drag ' + (draggable ? 'draggable' : ''),\n        style: _drag2.default.rotateStyle(-pointerRotate),\n        onMouseDown: draggable ? this.handleMouseDown : Function.prototype,\n        onTouchStart: draggable ? this.handleMouseDown : Function.prototype\n      }, time)), _react2.default.createElement('div', {\n        className: 'picker_center',\n        ref: function ref(p) {\n          return _this2.pickerCenter = p;\n        }\n      }));\n    }\n  }]);\n\n  return PickerDragHandler;\n}(_react2.default.PureComponent);\n\nPickerDragHandler.propTypes = propTypes;\nPickerDragHandler.defaultProps = defaultProps;\nexports.default = PickerDragHandler;","map":null,"metadata":{},"sourceType":"script"}