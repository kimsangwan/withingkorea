{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _isEqual = require('lodash/isEqual');\n\nvar _isEqual2 = _interopRequireDefault(_isEqual);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactDom = require('react-dom');\n\nvar _Portal = require('react-overlays/lib/Portal');\n\nvar _Portal2 = _interopRequireDefault(_Portal);\n\nvar _componentOrElement = require('prop-types-extra/lib/componentOrElement');\n\nvar _componentOrElement2 = _interopRequireDefault(_componentOrElement);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar BODY_CLASS = 'rbt-body-container';\nvar DROPUP_SPACING = -4; // When appending the overlay to `document.body`, clicking on it will register\n// as an \"outside\" click and immediately close the overlay. This classname tells\n// `react-onclickoutside` to ignore the click.\n\nvar IGNORE_CLICK_OUTSIDE = 'ignore-react-onclickoutside';\n\nfunction isBody(container) {\n  return container === document.body;\n}\n/**\n * Custom `Overlay` component, since the version in `react-overlays` doesn't\n * work for our needs. Specifically, the `Position` component doesn't provide\n * the customized placement we need.\n */\n\n\nvar Overlay = function (_React$Component) {\n  _inherits(Overlay, _React$Component);\n\n  function Overlay() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Overlay);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Overlay.__proto__ || Object.getPrototypeOf(Overlay)).call.apply(_ref, [this].concat(args))), _this), _this.displayName = 'Overlay', _this.state = {\n      left: 0,\n      right: 0,\n      top: 0\n    }, _this._update = function () {\n      var _container$classList;\n\n      var _this$props = _this.props,\n          className = _this$props.className,\n          container = _this$props.container,\n          show = _this$props.show; // Positioning is only used when body is the container.\n\n      if (!(show && isBody(container) && _this._mounted)) {\n        return;\n      } // Set a classname on the body for scoping purposes.\n\n\n      container.classList.add(BODY_CLASS);\n      !!className && (_container$classList = container.classList).add.apply(_container$classList, _toConsumableArray(className.split(' ')));\n\n      _this._updatePosition();\n    }, _this._updatePosition = function () {\n      var _this$props2 = _this.props,\n          align = _this$props2.align,\n          dropup = _this$props2.dropup,\n          target = _this$props2.target;\n      var menuNode = (0, _reactDom.findDOMNode)(_this._menu);\n      var targetNode = (0, _reactDom.findDOMNode)(target);\n\n      if (menuNode && targetNode) {\n        var _window = window,\n            innerWidth = _window.innerWidth,\n            pageYOffset = _window.pageYOffset;\n\n        var _targetNode$getBoundi = targetNode.getBoundingClientRect(),\n            bottom = _targetNode$getBoundi.bottom,\n            left = _targetNode$getBoundi.left,\n            top = _targetNode$getBoundi.top,\n            width = _targetNode$getBoundi.width;\n\n        var newState = {\n          left: align === 'right' ? 'auto' : left,\n          right: align === 'left' ? 'auto' : innerWidth - left - width,\n          top: dropup ? pageYOffset - menuNode.offsetHeight + top + DROPUP_SPACING : pageYOffset + bottom\n        }; // Don't update unless the target element position has changed.\n\n        if (!(0, _isEqual2.default)(_this.state, newState)) {\n          _this.setState(newState);\n        }\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(Overlay, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this._mounted = true;\n\n      this._update();\n\n      this._updateThrottled = requestAnimationFrame.bind(null, this._update);\n      window.addEventListener('resize', this._updateThrottled);\n      window.addEventListener('scroll', this._updateThrottled, true);\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var onMenuHide = nextProps.onMenuHide,\n          onMenuShow = nextProps.onMenuShow,\n          show = nextProps.show;\n\n      if (this.props.show && !show) {\n        onMenuHide();\n      }\n\n      if (!this.props.show && show) {\n        onMenuShow();\n      } // Remove scoping classes if menu isn't being appended to document body.\n\n\n      var _props = this.props,\n          className = _props.className,\n          container = _props.container;\n\n      if (isBody(container) && !isBody(nextProps.container)) {\n        var _container$classList2;\n\n        container.classList.remove(BODY_CLASS);\n        !!className && (_container$classList2 = container.classList).remove.apply(_container$classList2, _toConsumableArray(className.split(' ')));\n      }\n\n      this._updateThrottled();\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this._mounted = false;\n      window.removeEventListener('resize', this._updateThrottled);\n      window.removeEventListener('scroll', this._updateThrottled);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props2 = this.props,\n          children = _props2.children,\n          container = _props2.container,\n          show = _props2.show;\n\n      if (!(show && _react.Children.count(children))) {\n        return null;\n      }\n\n      var child = _react.Children.only(children); // When not attaching the overlay to `document.body` treat the child as a\n      // simple inline element.\n\n\n      if (!isBody(container)) {\n        return child;\n      }\n\n      child = (0, _react.cloneElement)(child, _extends({}, child.props, {\n        className: (0, _classnames2.default)(child.props.className, IGNORE_CLICK_OUTSIDE),\n        ref: function ref(menu) {\n          return _this2._menu = menu;\n        },\n        style: this.state\n      }));\n      return _react2.default.createElement(_Portal2.default, {\n        container: container,\n        ref: function ref(portal) {\n          return _this2._portal = portal;\n        }\n      }, child);\n    }\n  }]);\n\n  return Overlay;\n}(_react2.default.Component);\n\nOverlay.propTypes = {\n  children: _propTypes2.default.element,\n  container: _componentOrElement2.default.isRequired,\n  onMenuHide: _propTypes2.default.func.isRequired,\n  onMenuShow: _propTypes2.default.func.isRequired,\n  show: _propTypes2.default.bool,\n  target: _componentOrElement2.default.isRequired\n};\nOverlay.defaultProps = {\n  show: false\n};\nexports.default = Overlay;","map":null,"metadata":{},"sourceType":"script"}