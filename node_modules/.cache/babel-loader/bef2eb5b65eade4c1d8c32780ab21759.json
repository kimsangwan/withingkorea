{"ast":null,"code":"var extend = require(\"xtend\");\n\nvar h = require('hyperscript');\n\nvar handleChange = require('./handle_change');\n\nmodule.exports = function (options) {\n  options = extend({\n    value: 50,\n    min: 0,\n    max: 100,\n    step: 1,\n    cursor: false,\n    thickness: 0.35,\n    lineCap: 'butt',\n    readOnly: false,\n    displayInput: true,\n    width: 200,\n    height: options.width || 200,\n    bgColor: '#EEEEEE',\n    fgColor: '#87CEEB',\n    labelColor: '#888',\n    angleOffset: 0,\n    angleArc: 360,\n    className: null,\n    activeClass: null\n  }, options);\n  var canvas = h('canvas', {\n    height: options.height,\n    width: options.width,\n    style: {\n      'position': 'absolute'\n    }\n  });\n  var context2d = canvas.getContext(\"2d\");\n  var fontScale = Math.max(String(Math.abs(options.max)).length, String(Math.abs(options.min)).length, 2) + 2;\n  var inputOptions = {\n    value: options.value,\n    style: {\n      'position': 'absolute',\n      'top': options.width / 2 - options.width / 7 + 'px',\n      'left': getLineWidth(options) + 'px',\n      'width': options.width - getLineWidth(options) * 2 + 'px',\n      'vertical-align': 'middle',\n      'border': 0,\n      'background': 'none',\n      'font': 'bold ' + (options.width / fontScale >> 0) + 'px Arial',\n      'text-align': 'center',\n      'color': options.fgColor,\n      'padding': '0px',\n      '-webkit-appearance': 'none'\n    }\n  };\n\n  if (options.readOnly) {\n    inputOptions['disabled'] = true;\n  }\n\n  if (options.displayInput === false) {\n    inputOptions.style['display'] = 'none';\n  }\n\n  var input = h('input', inputOptions);\n  var label = h('span', {\n    style: {\n      'color': options.labelColor,\n      'position': 'absolute',\n      'bottom': 0,\n      'font-size': '80%',\n      'text-align': 'center',\n      'pointer-events': 'none',\n      'top': options.width / 2 + options.width / 8 - 3 + 'px',\n      'left': 0,\n      'right': 0\n    }\n  }, options.label);\n  var element = h('div', {\n    className: options.className,\n    style: {\n      'display': 'inline-block',\n      'position': 'relative',\n      'height': options.height + 'px',\n      'width': options.width + 'px'\n    }\n  }, canvas, input, label);\n  element.canvas = canvas;\n  element.options = options;\n  var renderedValue = options.value;\n  var animating = false;\n\n  element.setValue = function (value, event) {\n    value = Math.min(options.max, Math.max(options.min, value));\n    options.value = value;\n    element.value = value;\n\n    if (!animating) {\n      refreshCanvas();\n    }\n\n    if (event === true && element.onchange) {\n      element.onchange();\n    }\n  };\n\n  element.getValue = function () {\n    return options.value;\n  };\n\n  input.onchange = function () {\n    element.setValue(this.value);\n  };\n\n  var requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n\n  function refreshCanvas() {\n    if (renderedValue === options.value) {\n      animating = false;\n    } else {\n      animating = true;\n      renderedValue = options.value;\n      context2d.clearRect(0, 0, canvas.width, canvas.height);\n      draw(context2d, options);\n      input.value = options.value;\n      requestAnimationFrame.call(window, refreshCanvas);\n    }\n  }\n\n  draw(context2d, options);\n\n  if (!options.readOnly) {\n    handleChange(element);\n  }\n\n  return element;\n};\n\nfunction getLineWidth(options) {\n  var xy = options.width / 2;\n  return xy * options.thickness;\n}\n\nfunction draw(context2d, options) {\n  // deg to rad\n  var angleOffset = options.angleOffset * Math.PI / 180;\n  var angleArc = options.angleArc * Math.PI / 180;\n  var angle = (options.value - options.min) * angleArc / (options.max - options.min);\n  var xy = options.width / 2;\n  var lineWidth = xy * options.thickness;\n  var radius = xy - lineWidth / 2;\n  var startAngle = 1.5 * Math.PI + angleOffset;\n  var endAngle = 1.5 * Math.PI + angleOffset + angleArc;\n  var startAt = startAngle;\n  var endAt = startAt + angle;\n\n  if (options.cursor) {\n    var cursorExt = options.cursor / 100 || 1;\n    startAt = endAt - cursorExt;\n    endAt = endAt + cursorExt;\n  }\n\n  context2d.lineWidth = lineWidth;\n  context2d.lineCap = options.lineCap;\n  context2d.beginPath();\n  context2d.strokeStyle = options.bgColor;\n  context2d.arc(xy, xy, radius, endAngle, startAngle, true);\n  context2d.stroke();\n  context2d.beginPath();\n  context2d.strokeStyle = options.fgColor;\n  context2d.arc(xy, xy, radius, startAt, endAt, false);\n  context2d.stroke();\n}","map":null,"metadata":{},"sourceType":"script"}