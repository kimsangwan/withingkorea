{"ast":null,"code":"var split = require('browser-split');\n\nvar ClassList = require('class-list');\n\nvar DataSet = require('data-set');\n\nmodule.exports = h;\n\nfunction h() {\n  var args = [].slice.call(arguments),\n      e = null;\n\n  function item(l) {\n    var r;\n\n    function parseClass(string) {\n      var m = split(string, /([\\.#]?[a-zA-Z0-9_-]+)/);\n      forEach(m, function (v) {\n        var s = v.substring(1, v.length);\n        if (!v) return;\n        if (!e) e = document.createElement(v);else if (v[0] === '.') ClassList(e).add(s);else if (v[0] === '#') e.setAttribute('id', s);\n      });\n    }\n\n    if (l == null) ;else if ('string' === typeof l) {\n      if (!e) parseClass(l);else e.appendChild(r = document.createTextNode(l));\n    } else if ('number' === typeof l || 'boolean' === typeof l || l instanceof Date || l instanceof RegExp) {\n      e.appendChild(r = document.createTextNode(l.toString()));\n    } //there might be a better way to handle this...\n    else if (isArray(l)) forEach(l, item);else if (isNode(l)) e.appendChild(r = l);else if (l instanceof Text) e.appendChild(r = l);else if ('object' === typeof l) {\n        for (var k in l) {\n          if ('function' === typeof l[k]) {\n            if (/^on\\w+/.test(k)) {\n              e.addEventListener ? e.addEventListener(k.substring(2), l[k]) : e.attachEvent(k, l[k]);\n            } else {\n              e[k] = l[k]();\n              l[k](function (v) {\n                e[k] = v;\n              });\n            }\n          } else if (k === 'style') {\n            for (var s in l[k]) (function (s, v) {\n              if ('function' === typeof v) {\n                e.style.setProperty(s, v());\n                v(function (val) {\n                  e.style.setProperty(s, val);\n                });\n              } else e.style.setProperty(s, l[k][s]);\n            })(s, l[k][s]);\n          } else if (k.substr(0, 5) === \"data-\") {\n            DataSet(e)[k.substr(5)] = l[k];\n          } else {\n            e[k] = l[k];\n          }\n        }\n      } else if ('function' === typeof l) {\n        //assume it's an observable!\n        var v = l();\n        e.appendChild(r = isNode(v) ? v : document.createTextNode(v));\n        l(function (v) {\n          if (isNode(v) && r.parentElement) r.parentElement.replaceChild(v, r), r = v;else r.textContent = v;\n        });\n      }\n    return r;\n  }\n\n  while (args.length) item(args.shift());\n\n  return e;\n}\n\nfunction isNode(el) {\n  return el && el.nodeName && el.nodeType;\n}\n\nfunction isText(el) {\n  return el && el.nodeName === '#text' && el.nodeType == 3;\n}\n\nfunction forEach(arr, fn) {\n  if (arr.forEach) return arr.forEach(fn);\n\n  for (var i = 0; i < arr.length; i++) fn(arr[i], i);\n}\n\nfunction isArray(arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n}","map":null,"metadata":{},"sourceType":"script"}