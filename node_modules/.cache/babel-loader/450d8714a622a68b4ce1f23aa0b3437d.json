{"ast":null,"code":"var ever = require('ever');\n\nmodule.exports = function (knob) {\n  var documentEvents = ever(window.document);\n  ever(knob.canvas).on('mousedown', function (e) {\n    e.preventDefault();\n    var offset = getOffset(knob.canvas);\n\n    function mouseMove(e) {\n      knob.setValue(xyToValue(knob.options, e.pageX, e.pageY, offset), true);\n    }\n\n    function mouseUp(e) {\n      knob.options.activeClass && knob.classList.remove(knob.options.activeClass);\n      documentEvents.removeListener('mousemove', mouseMove);\n      documentEvents.removeListener('mouseup', mouseUp);\n    }\n\n    knob.options.activeClass && knob.classList.add(knob.options.activeClass);\n    documentEvents.on('mousemove', mouseMove).on('mouseup', mouseUp);\n    mouseMove(e);\n  }).on('touchstart', function (e) {\n    e.preventDefault();\n    var touchIndex = e.touches.length - 1;\n    var offset = getOffset(knob.canvas);\n\n    function touchMove(e) {\n      knob.setValue(xyToValue(knob.options, e.touches[touchIndex].pageX, e.touches[touchIndex].pageY, offset), true);\n    }\n\n    function touchEnd() {\n      knob.options.activeClass && knob.classList.remove(knob.options.activeClass);\n      documentEvents.removeListener('touchmove', touchMove);\n      documentEvents.removeListener('touchend', touchEnd);\n    }\n\n    knob.options.activeClass && knob.classList.add(knob.options.activeClass);\n    documentEvents.on('touchmove', touchMove).on('touchend', touchEnd);\n    touchMove(e);\n  });\n};\n\nfunction xyToValue(options, x, y, offset) {\n  var PI2 = 2 * Math.PI;\n  var w2 = options.width / 2;\n  var angleArc = options.angleArc * Math.PI / 180;\n  var angleOffset = options.angleOffset * Math.PI / 180;\n  var angle = Math.atan2(x - (offset.x + w2), -(y - offset.y - w2)) - angleOffset;\n\n  if (angleArc != PI2 && angle < 0 && angle > -0.5) {\n    angle = 0;\n  } else if (angle < 0) {\n    angle += PI2;\n  }\n\n  var result = ~~(0.5 + angle * (options.max - options.min) / angleArc) + options.min;\n  return Math.max(Math.min(result, options.max), options.min);\n}\n\nfunction getOffset(element) {\n  var result = {\n    x: 0,\n    y: 0\n  };\n\n  while (element) {\n    result.x += element.offsetLeft;\n    result.y += element.offsetTop;\n    element = element.offsetParent;\n  }\n\n  return result;\n}","map":null,"metadata":{},"sourceType":"script"}