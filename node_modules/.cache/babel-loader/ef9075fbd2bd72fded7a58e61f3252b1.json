{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _head = require('lodash/head');\n\nvar _head2 = _interopRequireDefault(_head);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _utils = require('../utils/');\n\nvar _keyCode = require('../constants/keyCode');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction typeaheadInputContainer(Input) {\n  var WrappedInput = function (_React$Component) {\n    _inherits(WrappedInput, _React$Component);\n\n    function WrappedInput() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, WrappedInput);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = WrappedInput.__proto__ || Object.getPrototypeOf(WrappedInput)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n        isFocused: false\n      }, _this._handleBlur = function (e) {\n        // Note: Don't hide the menu here, since that interferes with other\n        // actions like making a selection by clicking on a menu item.\n        _this.props.onBlur(e);\n\n        _this.setState({\n          isFocused: false\n        });\n      }, _this._handleChange = function (e) {\n        var _this$props = _this.props,\n            multiple = _this$props.multiple,\n            onChange = _this$props.onChange,\n            onRemove = _this$props.onRemove,\n            selected = _this$props.selected;\n\n        if (!multiple) {\n          // Clear any selections when text is entered.\n          !!selected.length && onRemove((0, _head2.default)(selected));\n        }\n\n        onChange(e.target.value);\n      }, _this._handleFocus = function (e) {\n        _this.props.onFocus(e);\n\n        _this.setState({\n          isFocused: true\n        });\n      }, _this._handleContainerClickOrFocus = function (e) {\n        // Don't focus the input if it's disabled.\n        if (_this.props.disabled) {\n          e.target.blur();\n          return;\n        } // Move cursor to the end if the user clicks outside the actual input.\n\n\n        var inputNode = _this.getInputNode();\n\n        if (e.target !== inputNode) {\n          inputNode.selectionStart = inputNode.value.length;\n        }\n\n        inputNode.focus();\n      }, _this._handleKeyDown = function (e) {\n        var _this$props2 = _this.props,\n            activeItem = _this$props2.activeItem,\n            initialItem = _this$props2.initialItem,\n            multiple = _this$props2.multiple,\n            onAdd = _this$props2.onAdd,\n            selected = _this$props2.selected,\n            selectHintOnEnter = _this$props2.selectHintOnEnter;\n        var value = (0, _utils.getInputText)(_this.props);\n\n        switch (e.keyCode) {\n          case _keyCode.BACKSPACE:\n            if (!multiple) {\n              break;\n            }\n\n            var inputContainer = (0, _reactDom.findDOMNode)(_this._input);\n\n            if (inputContainer && inputContainer.contains(document.activeElement) && !value) {\n              // If the input is selected and there is no text, select the last\n              // token when the user hits backspace.\n              var sibling = inputContainer.parentElement.previousSibling;\n              sibling && sibling.focus(); // Prevent browser \"back\" action.\n\n              e.preventDefault();\n            }\n\n            break;\n\n          case _keyCode.RETURN:\n          case _keyCode.RIGHT:\n          case _keyCode.TAB:\n            // TODO: Support hinting for multi-selection.\n            if (multiple) {\n              break;\n            }\n\n            var hintText = (0, _utils.getHintText)(_this.props);\n            var selectionStart = e.target.selectionStart; // Autocomplete the selection if all of the following are true:\n\n            if ( // There's a hint or a menu item is highlighted.\n            (hintText || activeItem) && // There's no current selection.\n            !selected.length && // The input cursor is at the end of the text string when the user\n            // hits the right arrow key.\n            !(e.keyCode === _keyCode.RIGHT && selectionStart !== value.length) && !(e.keyCode === _keyCode.RETURN && !selectHintOnEnter)) {\n              e.preventDefault();\n              var selectedOption = hintText ? initialItem : activeItem;\n              onAdd && onAdd(selectedOption);\n            }\n\n            break;\n        }\n\n        _this.props.onKeyDown(e);\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    _createClass(WrappedInput, [{\n      key: 'render',\n      value: function render() {\n        var _this2 = this;\n\n        var _props = this.props,\n            activeIndex = _props.activeIndex,\n            isMenuShown = _props.isMenuShown,\n            menuId = _props.menuId,\n            multiple = _props.multiple,\n            placeholder = _props.placeholder,\n            selected = _props.selected; // Add a11y-related props.\n\n        var inputProps = _extends({}, this.props.inputProps, {\n          'aria-activedescendant': activeIndex >= 0 ? (0, _utils.getMenuItemId)(activeIndex) : '',\n          'aria-autocomplete': multiple ? 'list' : 'both',\n          'aria-expanded': isMenuShown,\n          'aria-haspopup': 'listbox',\n          'aria-owns': menuId,\n          autoComplete: 'off',\n          // Comboboxes are single-select by definition:\n          // https://www.w3.org/TR/wai-aria-practices-1.1/#combobox\n          role: multiple ? '' : 'combobox'\n        });\n\n        return _react2.default.createElement(Input, _extends({}, this.props, this.state, {\n          hintText: (0, _utils.getHintText)(this.props),\n          inputProps: inputProps,\n          inputRef: function inputRef(input) {\n            return _this2._input = input;\n          },\n          onBlur: this._handleBlur,\n          onChange: this._handleChange,\n          onContainerClickOrFocus: this._handleContainerClickOrFocus,\n          onFocus: this._handleFocus,\n          onKeyDown: this._handleKeyDown,\n          placeholder: selected.length ? null : placeholder,\n          value: (0, _utils.getInputText)(this.props)\n        }));\n      }\n    }, {\n      key: 'getInputNode',\n      value: function getInputNode() {\n        return this._input.getInput();\n      }\n      /**\n       * Forward click or focus events on the container element to the input.\n       */\n\n    }]);\n\n    return WrappedInput;\n  }(_react2.default.Component);\n\n  return WrappedInput;\n}\n\nexports.default = typeaheadInputContainer;","map":null,"metadata":{},"sourceType":"script"}